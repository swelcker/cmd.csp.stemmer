
// http://snowballstem.org/
package cmd.csp.stemmer;

/**
 * This class was automatically generated by a Snowball to Java compiler It
 * implements the stemming algorithm defined by a snowball script.
 */
public class TamilStemmer extends SnowballStemmer{
	private static final long serialVersionUID=1L;
	private final static Among a_0[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u0099",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009E",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00A8",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00AE",-1,-1),
		new Among("\u00E0\u00AE\u00AF",-1,-1),
		new Among("\u00E0\u00AE\u00B5",-1,-1)
	};
	private final static Among a_1[]={
		new Among("\u00E0\u00AE\u00A8\u00E0\u00AF\u008D\u00E0\u00AE\u00A4\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u00A8\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u00A8\u00E0\u00AF\u008D\u00E0\u00AE\u00A4",-1,-1)
	};
	private final static Among a_2[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_3[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00B1",-1,-1)
	};
	private final static Among a_4[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00B1",-1,-1)
	};
	private final static Among a_5[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00B1",-1,-1)
	};
	private final static Among a_6[]={
		new Among("\u00E0\u00AE\u00AF",-1,-1),
		new Among("\u00E0\u00AE\u00B0",-1,-1),
		new Among("\u00E0\u00AE\u00B2",-1,-1),
		new Among("\u00E0\u00AE\u00B3",-1,-1),
		new Among("\u00E0\u00AE\u00B4",-1,-1),
		new Among("\u00E0\u00AE\u00B5",-1,-1)
	};
	private final static Among a_7[]={
		new Among("\u00E0\u00AE\u0099",-1,-1),
		new Among("\u00E0\u00AE\u009E",-1,-1),
		new Among("\u00E0\u00AE\u00A3",-1,-1),
		new Among("\u00E0\u00AE\u00A8",-1,-1),
		new Among("\u00E0\u00AE\u00A9",-1,-1),
		new Among("\u00E0\u00AE\u00AE",-1,-1)
	};
	private final static Among a_8[]={
		new Among("\u00E0\u00AE\u00B5\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u00AF",-1,-1),
		new Among("\u00E0\u00AE\u00B5",-1,-1)
	};
	private final static Among a_9[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0082",-1,-1),
		new Among("\u00E0\u00AF\u0086",-1,-1),
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_10[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0082",-1,-1),
		new Among("\u00E0\u00AF\u0086",-1,-1),
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_11[]={
		new Among("\u00E0\u00AE\u0085",-1,-1),
		new Among("\u00E0\u00AE\u0087",-1,-1),
		new Among("\u00E0\u00AE\u0089",-1,-1)
	};
	private final static Among a_12[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u0099",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009E",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00A8",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00AE",-1,-1),
		new Among("\u00E0\u00AE\u00AF",-1,-1),
		new Among("\u00E0\u00AE\u00B5",-1,-1)
	};
	private final static Among a_13[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00B1",-1,-1)
	};
	private final static Among a_14[]={
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u008B",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1)
	};
	private final static Among a_15[]={
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u00BF",-1,-1),
		new Among("\u00E0\u00AE\u00B5\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_16[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0082",-1,-1),
		new Among("\u00E0\u00AF\u0086",-1,-1),
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_17[]={
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u009F\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AE\u00B5\u00E0\u00AE\u00BF\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u009F\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AE\u00B5\u00E0\u00AE\u00BF\u00E0\u00AE\u009F\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u009F\u00E0\u00AE\u00A4\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0086\u00E0\u00AE\u00B2\u00E0\u00AF\u008D\u00E0\u00AE\u00B2\u00E0\u00AE\u00BE\u00E0\u00AE\u00AE\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u009F\u00E0\u00AE\u00A3",-1,-1),
		new Among("\u00E0\u00AE\u00A4\u00E0\u00AE\u00BE\u00E0\u00AE\u00A9",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AE\u00BF\u00E0\u00AE\u00A4\u00E0\u00AE\u00BE\u00E0\u00AE\u00A9",8,-1),
		new Among("\u00E0\u00AE\u0095\u00E0\u00AF\u0081\u00E0\u00AE\u00B0\u00E0\u00AE\u00BF\u00E0\u00AE\u00AF",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AE\u00BF",-1,-1),
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u00B1\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_18[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00B1",-1,-1)
	};
	private final static Among a_19[]={
		new Among("\u00E0\u00AE\u0095",-1,-1),
		new Among("\u00E0\u00AE\u009A",-1,-1),
		new Among("\u00E0\u00AE\u009F",-1,-1),
		new Among("\u00E0\u00AE\u00A4",-1,-1),
		new Among("\u00E0\u00AE\u00AA",-1,-1),
		new Among("\u00E0\u00AE\u00B1",-1,-1)
	};
	private final static Among a_20[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0082",-1,-1),
		new Among("\u00E0\u00AF\u0086",-1,-1),
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_21[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0082",-1,-1),
		new Among("\u00E0\u00AF\u0086",-1,-1),
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_22[]={
		new Among("\u00E0\u00AE\u00AA\u00E0\u00AE\u009F\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AE\u0095\u00E0\u00AF\u008A\u00E0\u00AE\u00A3\u00E0\u00AF\u008D\u00E0\u00AE\u009F\u00E0\u00AE\u00BF\u00E0\u00AE\u00B0\u00E0\u00AF\u008D",-1,-1)
	};
	private final static Among a_23[]={
		new Among("\u00E0\u00AE\u0085",-1,-1),
		new Among("\u00E0\u00AE\u0086",-1,-1),
		new Among("\u00E0\u00AE\u0087",-1,-1),
		new Among("\u00E0\u00AE\u0088",-1,-1),
		new Among("\u00E0\u00AE\u0089",-1,-1),
		new Among("\u00E0\u00AE\u008A",-1,-1),
		new Among("\u00E0\u00AE\u008E",-1,-1),
		new Among("\u00E0\u00AE\u008F",-1,-1),
		new Among("\u00E0\u00AE\u0090",-1,-1),
		new Among("\u00E0\u00AE\u0092",-1,-1),
		new Among("\u00E0\u00AE\u0093",-1,-1),
		new Among("\u00E0\u00AE\u0094",-1,-1)
	};
	private final static Among a_24[]={
		new Among("\u00E0\u00AF\u0080",-1,-1),
		new Among("\u00E0\u00AF\u0081",-1,-1),
		new Among("\u00E0\u00AF\u0082",-1,-1),
		new Among("\u00E0\u00AF\u0086",-1,-1),
		new Among("\u00E0\u00AF\u0087",-1,-1),
		new Among("\u00E0\u00AF\u0088",-1,-1),
		new Among("\u00E0\u00AE\u00BE",-1,-1),
		new Among("\u00E0\u00AE\u00BF",-1,-1)
	};
	private final static Among a_25[]={
		new Among("\u00E0\u00AE\u0095\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u00BE\u00E0\u00AE\u00A8\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u0095\u00E0\u00AE\u00BF\u00E0\u00AE\u00B1\u00E0\u00AF\u008D",-1,-1),
		new Among("\u00E0\u00AE\u0095\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1",-1,-1),
		new Among("\u00E0\u00AE\u00BE\u00E0\u00AE\u00A8\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1",-1,-1),
		new Among("\u00E0\u00AE\u0095\u00E0\u00AE\u00BF\u00E0\u00AE\u00B1",-1,-1)
	};
	private int I_length;
	private boolean B_found_vetrumai_urupu;
	private boolean B_found_a_match;
	private boolean r_has_min_length(){
		// (, line 103
		I_length=current.length();
		if(!(I_length>4)){
			return false;
		}
		return true;
	}
	private boolean r_fix_va_start(){
		// (, line 108
		// or, line 109
		lab0:
		do{
			int v_1=cursor;
			lab1:
			do{
				// (, line 109
				// and, line 109
				int v_2=cursor;
				// try, line 109
				int v_3=cursor;
				lab2:
				do{
					// literal, line 109
					if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u008B"))){
						cursor=v_3;
						break lab2;
					}
				}while(false);
				cursor=v_2;
				// [, line 109
				bra=cursor;
				// literal, line 109
				if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u008B"))){
					break lab1;
				}
				// ], line 109
				ket=cursor;
				// <-, line 109
				slice_from("\u00E0\u00AE\u0093");
				break lab0;
			}while(false);
			cursor=v_1;
			lab3:
			do{
				// (, line 110
				// and, line 110
				int v_4=cursor;
				// try, line 110
				int v_5=cursor;
				lab4:
				do{
					// literal, line 110
					if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u008A"))){
						cursor=v_5;
						break lab4;
					}
				}while(false);
				cursor=v_4;
				// [, line 110
				bra=cursor;
				// literal, line 110
				if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u008A"))){
					break lab3;
				}
				// ], line 110
				ket=cursor;
				// <-, line 110
				slice_from("\u00E0\u00AE\u0092");
				break lab0;
			}while(false);
			cursor=v_1;
			lab5:
			do{
				// (, line 111
				// and, line 111
				int v_6=cursor;
				// try, line 111
				int v_7=cursor;
				lab6:
				do{
					// literal, line 111
					if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u0081"))){
						cursor=v_7;
						break lab6;
					}
				}while(false);
				cursor=v_6;
				// [, line 111
				bra=cursor;
				// literal, line 111
				if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u0081"))){
					break lab5;
				}
				// ], line 111
				ket=cursor;
				// <-, line 111
				slice_from("\u00E0\u00AE\u0089");
				break lab0;
			}while(false);
			cursor=v_1;
			// (, line 112
			// and, line 112
			int v_8=cursor;
			// try, line 112
			int v_9=cursor;
			lab7:
			do{
				// literal, line 112
				if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u0082"))){
					cursor=v_9;
					break lab7;
				}
			}while(false);
			cursor=v_8;
			// [, line 112
			bra=cursor;
			// literal, line 112
			if(!(eq_s("\u00E0\u00AE\u00B5\u00E0\u00AF\u0082"))){
				return false;
			}
			// ], line 112
			ket=cursor;
			// <-, line 112
			slice_from("\u00E0\u00AE\u008A");
		}while(false);
		return true;
	}
	private boolean r_fix_endings(){
		// (, line 115
		// do, line 116
		int v_1=cursor;
		lab0:
		do{
			// repeat, line 116
			replab1:
			while(true){
				int v_2=cursor;
				lab2:
				do{
					// call fix_ending, line 116
					if(!r_fix_ending()){
						break lab2;
					}
					continue replab1;
				}while(false);
				cursor=v_2;
				break replab1;
			}
		}while(false);
		cursor=v_1;
		return true;
	}
	private boolean r_remove_question_prefixes(){
		// (, line 119
		// [, line 120
		bra=cursor;
		// (, line 120
		// literal, line 120
		if(!(eq_s("\u00E0\u00AE\u008E"))){
			return false;
		}
		// among, line 120
		if(find_among(a_0)==0){
			return false;
		}
		// literal, line 120
		if(!(eq_s("\u00E0\u00AF\u008D"))){
			return false;
		}
		// ], line 120
		ket=cursor;
		// delete, line 120
		slice_del();
		// do, line 121
		int v_1=cursor;
		lab0:
		do{
			// call fix_va_start, line 121
			if(!r_fix_va_start()){
				break lab0;
			}
		}while(false);
		cursor=v_1;
		return true;
	}
	private boolean r_fix_ending(){
		// (, line 125
		I_length=current.length();
		if(!(I_length>3)){
			return false;
		}
		// backwards, line 128
		limit_backward=cursor;
		cursor=limit;
		// (, line 128
		// or, line 130
		lab0:
		do{
			int v_1=limit-cursor;
			lab1:
			do{
				// (, line 129
				// [, line 129
				ket=cursor;
				// among, line 129
				if(find_among_b(a_1)==0){
					break lab1;
				}
				// ], line 129
				bra=cursor;
				// delete, line 129
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab2:
			do{
				// (, line 131
				// [, line 131
				ket=cursor;
				// literal, line 131
				if(!(eq_s_b("\u00E0\u00AE\u00AF\u00E0\u00AF\u008D"))){
					break lab2;
				}
				// test, line 131
				int v_2=limit-cursor;
				// among, line 131
				if(find_among_b(a_2)==0){
					break lab2;
				}
				cursor=limit-v_2;
				// ], line 131
				bra=cursor;
				// delete, line 131
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab3:
			do{
				// (, line 133
				// [, line 133
				ket=cursor;
				// or, line 133
				lab4:
				do{
					int v_3=limit-cursor;
					lab5:
					do{
						// literal, line 133
						if(!(eq_s_b("\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u00AA\u00E0\u00AF\u008D"))){
							break lab5;
						}
						break lab4;
					}while(false);
					cursor=limit-v_3;
					// literal, line 133
					if(!(eq_s_b("\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u0095\u00E0\u00AF\u008D"))){
						break lab3;
					}
				}while(false);
				// ], line 133
				bra=cursor;
				// <-, line 133
				slice_from("\u00E0\u00AE\u00B3\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab6:
			do{
				// (, line 135
				// [, line 135
				ket=cursor;
				// literal, line 135
				if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AF\u008D"))){
					break lab6;
				}
				// ], line 135
				bra=cursor;
				// <-, line 135
				slice_from("\u00E0\u00AE\u00B2\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab7:
			do{
				// (, line 138
				// [, line 138
				ket=cursor;
				// literal, line 138
				if(!(eq_s_b("\u00E0\u00AE\u00B1\u00E0\u00AF\u008D\u00E0\u00AE\u0095\u00E0\u00AF\u008D"))){
					break lab7;
				}
				// ], line 138
				bra=cursor;
				// <-, line 138
				slice_from("\u00E0\u00AE\u00B2\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab8:
			do{
				// (, line 140
				// [, line 140
				ket=cursor;
				// literal, line 140
				if(!(eq_s_b("\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u009F\u00E0\u00AF\u008D"))){
					break lab8;
				}
				// ], line 140
				bra=cursor;
				// <-, line 140
				slice_from("\u00E0\u00AE\u009F\u00E0\u00AF\u0081");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab9:
			do{
				// (, line 142
				// Boolean test found_vetrumai_urupu, line 142
				if(!(B_found_vetrumai_urupu)){
					break lab9;
				}
				// [, line 142
				ket=cursor;
				// literal, line 142
				if(!(eq_s_b("\u00E0\u00AE\u00A4\u00E0\u00AF\u008D\u00E0\u00AE\u00A4\u00E0\u00AF\u008D"))){
					break lab9;
				}
				// (, line 142
				// test, line 142
				int v_4=limit-cursor;
				// not, line 142
				{
					int v_5=limit-cursor;
					lab10:
					do{
						// literal, line 142
						if(!(eq_s_b("\u00E0\u00AF\u0088"))){
							break lab10;
						}
						break lab9;
					}while(false);
					cursor=limit-v_5;
				}
				cursor=limit-v_4;
				// ], line 142
				bra=cursor;
				// <-, line 142
				slice_from("\u00E0\u00AE\u00AE\u00E0\u00AF\u008D");
				// ], line 142
				bra=cursor;
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab11:
			do{
				// (, line 144
				// [, line 144
				ket=cursor;
				// or, line 144
				lab12:
				do{
					int v_6=limit-cursor;
					lab13:
					do{
						// literal, line 144
						if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u0095\u00E0\u00AF\u008D"))){
							break lab13;
						}
						break lab12;
					}while(false);
					cursor=limit-v_6;
					// literal, line 144
					if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u0095\u00E0\u00AF\u008D\u00E0\u00AE\u0095\u00E0\u00AF\u008D"))){
						break lab11;
					}
				}while(false);
				// ], line 144
				bra=cursor;
				// <-, line 144
				slice_from("\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab14:
			do{
				// (, line 146
				// [, line 146
				ket=cursor;
				// literal, line 146
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					break lab14;
				}
				// among, line 146
				if(find_among_b(a_3)==0){
					break lab14;
				}
				// literal, line 146
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					break lab14;
				}
				// among, line 146
				if(find_among_b(a_4)==0){
					break lab14;
				}
				// ], line 146
				bra=cursor;
				// delete, line 146
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab15:
			do{
				// (, line 148
				// [, line 148
				ket=cursor;
				// literal, line 148
				if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u0095\u00E0\u00AF\u008D"))){
					break lab15;
				}
				// ], line 148
				bra=cursor;
				// <-, line 148
				slice_from("\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab16:
			do{
				// (, line 150
				// [, line 150
				ket=cursor;
				// literal, line 150
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					break lab16;
				}
				// among, line 150
				if(find_among_b(a_5)==0){
					break lab16;
				}
				// ], line 150
				bra=cursor;
				// delete, line 150
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab17:
			do{
				// (, line 152
				// [, line 152
				ket=cursor;
				// literal, line 152
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					break lab17;
				}
				// (, line 152
				// or, line 152
				lab18:
				do{
					int v_7=limit-cursor;
					lab19:
					do{
						// among, line 152
						if(find_among_b(a_6)==0){
							break lab19;
						}
						break lab18;
					}while(false);
					cursor=limit-v_7;
					// among, line 152
					if(find_among_b(a_7)==0){
						break lab17;
					}
				}while(false);
				// literal, line 152
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					break lab17;
				}
				// ], line 152
				bra=cursor;
				// <-, line 152
				slice_from("\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab20:
			do{
				// (, line 154
				// [, line 154
				ket=cursor;
				// among, line 154
				if(find_among_b(a_8)==0){
					break lab20;
				}
				// ], line 154
				bra=cursor;
				// delete, line 154
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab21:
			do{
				// (, line 156
				// [, line 156
				ket=cursor;
				// literal, line 156
				if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AF\u0081"))){
					break lab21;
				}
				// (, line 156
				// test, line 156
				int v_8=limit-cursor;
				// not, line 156
				{
					int v_9=limit-cursor;
					lab22:
					do{
						// among, line 156
						if(find_among_b(a_9)==0){
							break lab22;
						}
						break lab21;
					}while(false);
					cursor=limit-v_9;
				}
				cursor=limit-v_8;
				// ], line 156
				bra=cursor;
				// delete, line 156
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab23:
			do{
				// (, line 158
				// [, line 158
				ket=cursor;
				// literal, line 158
				if(!(eq_s_b("\u00E0\u00AE\u0099\u00E0\u00AF\u008D"))){
					break lab23;
				}
				// (, line 158
				// test, line 158
				int v_10=limit-cursor;
				// not, line 158
				{
					int v_11=limit-cursor;
					lab24:
					do{
						// literal, line 158
						if(!(eq_s_b("\u00E0\u00AF\u0088"))){
							break lab24;
						}
						break lab23;
					}while(false);
					cursor=limit-v_11;
				}
				cursor=limit-v_10;
				// ], line 158
				bra=cursor;
				// <-, line 158
				slice_from("\u00E0\u00AE\u00AE\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab25:
			do{
				// (, line 160
				// [, line 160
				ket=cursor;
				// literal, line 160
				if(!(eq_s_b("\u00E0\u00AE\u0099\u00E0\u00AF\u008D"))){
					break lab25;
				}
				// ], line 160
				bra=cursor;
				// delete, line 160
				slice_del();
				break lab0;
			}while(false);
			cursor=limit-v_1;
			// (, line 162
			// [, line 162
			ket=cursor;
			// literal, line 162
			if(!(eq_s_b("\u00E0\u00AF\u008D"))){
				return false;
			}
			// (, line 162
			// test, line 162
			int v_12=limit-cursor;
			// (, line 162
			// or, line 162
			lab26:
			do{
				int v_13=limit-cursor;
				lab27:
				do{
					// among, line 162
					if(find_among_b(a_10)==0){
						break lab27;
					}
					break lab26;
				}while(false);
				cursor=limit-v_13;
				// literal, line 162
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					return false;
				}
			}while(false);
			cursor=limit-v_12;
			// ], line 162
			bra=cursor;
			// delete, line 162
			slice_del();
		}while(false);
		cursor=limit_backward;
		return true;
	}
	private boolean r_remove_pronoun_prefixes(){
		// (, line 166
		// unset found_a_match, line 167
		B_found_a_match=false;
		// [, line 168
		bra=cursor;
		// among, line 168
		if(find_among(a_11)==0){
			return false;
		}
		// among, line 168
		if(find_among(a_12)==0){
			return false;
		}
		// literal, line 168
		if(!(eq_s("\u00E0\u00AF\u008D"))){
			return false;
		}
		// ], line 168
		ket=cursor;
		// delete, line 168
		slice_del();
		// (, line 169
		// set found_a_match, line 169
		B_found_a_match=true;
		// do, line 170
		int v_1=cursor;
		lab0:
		do{
			// call fix_va_start, line 170
			if(!r_fix_va_start()){
				break lab0;
			}
		}while(false);
		cursor=v_1;
		return true;
	}
	private boolean r_remove_plural_suffix(){
		// (, line 173
		// unset found_a_match, line 174
		B_found_a_match=false;
		// backwards, line 175
		limit_backward=cursor;
		cursor=limit;
		// (, line 175
		// or, line 176
		lab0:
		do{
			int v_1=limit-cursor;
			lab1:
			do{
				// (, line 176
				// [, line 176
				ket=cursor;
				// literal, line 176
				if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u0099\u00E0\u00AF\u008D\u00E0\u00AE\u0095\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
					break lab1;
				}
				// (, line 176
				// test, line 176
				int v_2=limit-cursor;
				// not, line 176
				{
					int v_3=limit-cursor;
					lab2:
					do{
						// among, line 176
						if(find_among_b(a_13)==0){
							break lab2;
						}
						break lab1;
					}while(false);
					cursor=limit-v_3;
				}
				cursor=limit-v_2;
				// ], line 176
				bra=cursor;
				// <-, line 176
				slice_from("\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab3:
			do{
				// (, line 177
				// [, line 177
				ket=cursor;
				// literal, line 177
				if(!(eq_s_b("\u00E0\u00AE\u00B1\u00E0\u00AF\u008D\u00E0\u00AE\u0095\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
					break lab3;
				}
				// ], line 177
				bra=cursor;
				// <-, line 177
				slice_from("\u00E0\u00AE\u00B2\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab4:
			do{
				// (, line 178
				// [, line 178
				ket=cursor;
				// literal, line 178
				if(!(eq_s_b("\u00E0\u00AE\u009F\u00E0\u00AF\u008D\u00E0\u00AE\u0095\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
					break lab4;
				}
				// ], line 178
				bra=cursor;
				// <-, line 178
				slice_from("\u00E0\u00AE\u00B3\u00E0\u00AF\u008D");
				break lab0;
			}while(false);
			cursor=limit-v_1;
			// (, line 179
			// [, line 179
			ket=cursor;
			// literal, line 179
			if(!(eq_s_b("\u00E0\u00AE\u0095\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
				return false;
			}
			// ], line 179
			bra=cursor;
			// delete, line 179
			slice_del();
		}while(false);
		// (, line 180
		// set found_a_match, line 180
		B_found_a_match=true;
		cursor=limit_backward;
		return true;
	}
	private boolean r_remove_question_suffixes(){
		// (, line 184
		// call has_min_length, line 185
		if(!r_has_min_length()){
			return false;
		}
		// unset found_a_match, line 186
		B_found_a_match=false;
		// backwards, line 187
		limit_backward=cursor;
		cursor=limit;
		// (, line 187
		// do, line 188
		int v_1=limit-cursor;
		lab0:
		do{
			// (, line 188
			// [, line 189
			ket=cursor;
			// among, line 189
			if(find_among_b(a_14)==0){
				break lab0;
			}
			// ], line 189
			bra=cursor;
			// <-, line 189
			slice_from("\u00E0\u00AF\u008D");
			// (, line 190
			// set found_a_match, line 190
			B_found_a_match=true;
		}while(false);
		cursor=limit-v_1;
		cursor=limit_backward;
		// do, line 193
		lab1:
		do{
			// call fix_endings, line 193
			if(!r_fix_endings()){
				break lab1;
			}
		}while(false);
		return true;
	}
	private boolean r_remove_command_suffixes(){
		// (, line 196
		// call has_min_length, line 197
		if(!r_has_min_length()){
			return false;
		}
		// unset found_a_match, line 198
		B_found_a_match=false;
		// backwards, line 199
		limit_backward=cursor;
		cursor=limit;
		// (, line 199
		// [, line 200
		ket=cursor;
		// among, line 200
		if(find_among_b(a_15)==0){
			return false;
		}
		// ], line 200
		bra=cursor;
		// delete, line 200
		slice_del();
		// (, line 201
		// set found_a_match, line 201
		B_found_a_match=true;
		cursor=limit_backward;
		return true;
	}
	private boolean r_remove_um(){
		// (, line 205
		// unset found_a_match, line 206
		B_found_a_match=false;
		// call has_min_length, line 207
		if(!r_has_min_length()){
			return false;
		}
		// backwards, line 208
		limit_backward=cursor;
		cursor=limit;
		// (, line 208
		// [, line 208
		ket=cursor;
		// literal, line 208
		if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
			return false;
		}
		// ], line 208
		bra=cursor;
		// <-, line 208
		slice_from("\u00E0\u00AF\u008D");
		// (, line 209
		// set found_a_match, line 209
		B_found_a_match=true;
		cursor=limit_backward;
		// do, line 211
		int v_1=cursor;
		lab0:
		do{
			// call fix_ending, line 211
			if(!r_fix_ending()){
				break lab0;
			}
		}while(false);
		cursor=v_1;
		return true;
	}
	private boolean r_remove_common_word_endings(){
		// (, line 214
		// unset found_a_match, line 218
		B_found_a_match=false;
		// call has_min_length, line 219
		if(!r_has_min_length()){
			return false;
		}
		// backwards, line 220
		limit_backward=cursor;
		cursor=limit;
		// (, line 220
		// or, line 237
		lab0:
		do{
			int v_1=limit-cursor;
			lab1:
			do{
				// test, line 221
				int v_2=limit-cursor;
				// (, line 221
				// [, line 221
				ket=cursor;
				// or, line 221
				lab2:
				do{
					int v_3=limit-cursor;
					lab3:
					do{
						// literal, line 221
						if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u009F\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
							break lab3;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab4:
					do{
						// literal, line 222
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00B2\u00E0\u00AF\u008D\u00E0\u00AE\u00B2\u00E0\u00AF\u0088"))){
							break lab4;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab5:
					do{
						// literal, line 223
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u009F\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
							break lab5;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab6:
					do{
						// literal, line 224
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AE\u00BF"))){
							break lab6;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab7:
					do{
						// literal, line 225
						if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u0095\u00E0\u00AE\u00BF"))){
							break lab7;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab8:
					do{
						// literal, line 226
						if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u0095\u00E0\u00AE\u00BF\u00E0\u00AE\u00AF"))){
							break lab8;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab9:
					do{
						// literal, line 227
						if(!(eq_s_b("\u00E0\u00AF\u0086\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AF\u0081"))){
							break lab9;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab10:
					do{
						// literal, line 228
						if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u00B3\u00E0\u00AF\u008D\u00E0\u00AE\u00B3"))){
							break lab10;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab11:
					do{
						// literal, line 229
						if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u009F\u00E0\u00AF\u0088\u00E0\u00AE\u00AF"))){
							break lab11;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab12:
					do{
						// literal, line 230
						if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u009F\u00E0\u00AF\u0088"))){
							break lab12;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab13:
					do{
						// literal, line 231
						if(!(eq_s_b("\u00E0\u00AF\u0086\u00E0\u00AE\u00A9\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
							break lab13;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab14:
					do{
						// (, line 232
						// literal, line 232
						if(!(eq_s_b("\u00E0\u00AE\u00B2\u00E0\u00AF\u008D\u00E0\u00AE\u00B2"))){
							break lab14;
						}
						// test, line 232
						int v_4=limit-cursor;
						// (, line 232
						// not, line 232
						{
							int v_5=limit-cursor;
							lab15:
							do{
								// among, line 232
								if(find_among_b(a_16)==0){
									break lab15;
								}
								break lab14;
							}while(false);
							cursor=limit-v_5;
						}
						cursor=limit-v_4;
						break lab2;
					}while(false);
					cursor=limit-v_3;
					lab16:
					do{
						// literal, line 233
						if(!(eq_s_b("\u00E0\u00AF\u0086\u00E0\u00AE\u00A9"))){
							break lab16;
						}
						break lab2;
					}while(false);
					cursor=limit-v_3;
					// literal, line 234
					if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u0095\u00E0\u00AE\u00BF"))){
						break lab1;
					}
				}while(false);
				// ], line 234
				bra=cursor;
				// <-, line 234
				slice_from("\u00E0\u00AF\u008D");
				// (, line 235
				// set found_a_match, line 235
				B_found_a_match=true;
				cursor=limit-v_2;
				break lab0;
			}while(false);
			cursor=limit-v_1;
			// test, line 238
			int v_6=limit-cursor;
			// (, line 238
			// [, line 238
			ket=cursor;
			// among, line 238
			if(find_among_b(a_17)==0){
				return false;
			}
			// ], line 251
			bra=cursor;
			// delete, line 251
			slice_del();
			// (, line 252
			// set found_a_match, line 252
			B_found_a_match=true;
			cursor=limit-v_6;
		}while(false);
		cursor=limit_backward;
		// do, line 255
		lab17:
		do{
			// call fix_endings, line 255
			if(!r_fix_endings()){
				break lab17;
			}
		}while(false);
		return true;
	}
	private boolean r_remove_vetrumai_urupukal(){
		// (, line 258
		// unset found_a_match, line 259
		B_found_a_match=false;
		// unset found_vetrumai_urupu, line 260
		B_found_vetrumai_urupu=false;
		// call has_min_length, line 261
		if(!r_has_min_length()){
			return false;
		}
		// backwards, line 262
		limit_backward=cursor;
		cursor=limit;
		// (, line 262
		// (, line 263
		// or, line 265
		lab0:
		do{
			int v_1=limit-cursor;
			lab1:
			do{
				// test, line 264
				int v_2=limit-cursor;
				// (, line 264
				// [, line 264
				ket=cursor;
				// literal, line 264
				if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AF\u0088"))){
					break lab1;
				}
				// ], line 264
				bra=cursor;
				// delete, line 264
				slice_del();
				cursor=limit-v_2;
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab2:
			do{
				// test, line 266
				int v_3=limit-cursor;
				// (, line 266
				// [, line 266
				ket=cursor;
				// or, line 267
				lab3:
				do{
					int v_4=limit-cursor;
					lab4:
					do{
						// (, line 266
						// or, line 266
						lab5:
						do{
							int v_5=limit-cursor;
							lab6:
							do{
								// literal, line 266
								if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u0088"))){
									break lab6;
								}
								break lab5;
							}while(false);
							cursor=limit-v_5;
							// literal, line 267
							if(!(eq_s_b("\u00E0\u00AF\u0088"))){
								break lab4;
							}
						}while(false);
						// (, line 267
						// test, line 267
						int v_6=limit-cursor;
						// not, line 267
						{
							int v_7=limit-cursor;
							lab7:
							do{
								// among, line 267
								if(find_among_b(a_18)==0){
									break lab7;
								}
								break lab4;
							}while(false);
							cursor=limit-v_7;
						}
						cursor=limit-v_6;
						break lab3;
					}while(false);
					cursor=limit-v_4;
					// (, line 268
					// literal, line 268
					if(!(eq_s_b("\u00E0\u00AF\u0088"))){
						break lab2;
					}
					// (, line 268
					// test, line 268
					int v_8=limit-cursor;
					// (, line 268
					// among, line 268
					if(find_among_b(a_19)==0){
						break lab2;
					}
					// literal, line 268
					if(!(eq_s_b("\u00E0\u00AF\u008D"))){
						break lab2;
					}
					cursor=limit-v_8;
				}while(false);
				// ], line 269
				bra=cursor;
				// <-, line 269
				slice_from("\u00E0\u00AF\u008D");
				cursor=limit-v_3;
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab8:
			do{
				// test, line 272
				int v_9=limit-cursor;
				// (, line 272
				// [, line 272
				ket=cursor;
				// or, line 273
				lab9:
				do{
					int v_10=limit-cursor;
					lab10:
					do{
						// literal, line 273
						if(!(eq_s_b("\u00E0\u00AF\u008A\u00E0\u00AE\u009F\u00E0\u00AF\u0081"))){
							break lab10;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab11:
					do{
						// literal, line 274
						if(!(eq_s_b("\u00E0\u00AF\u008B\u00E0\u00AE\u009F\u00E0\u00AF\u0081"))){
							break lab11;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab12:
					do{
						// literal, line 275
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00B2\u00E0\u00AF\u008D"))){
							break lab12;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab13:
					do{
						// literal, line 276
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00B1\u00E0\u00AF\u008D"))){
							break lab13;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab14:
					do{
						// (, line 277
						// literal, line 277
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
							break lab14;
						}
						// (, line 277
						// test, line 277
						int v_11=limit-cursor;
						// not, line 277
						{
							int v_12=limit-cursor;
							lab15:
							do{
								// literal, line 277
								if(!(eq_s_b("\u00E0\u00AE\u00AE"))){
									break lab15;
								}
								break lab14;
							}while(false);
							cursor=limit-v_12;
						}
						cursor=limit-v_11;
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab16:
					do{
						// literal, line 278
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AF\u0081"))){
							break lab16;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab17:
					do{
						// literal, line 279
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00B0\u00E0\u00AF\u0081\u00E0\u00AE\u00A8\u00E0\u00AF\u008D\u00E0\u00AE\u00A4\u00E0\u00AF\u0081"))){
							break lab17;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab18:
					do{
						// literal, line 280
						if(!(eq_s_b("\u00E0\u00AE\u00B5\u00E0\u00AE\u00BF\u00E0\u00AE\u009F"))){
							break lab18;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab19:
					do{
						// (, line 281
						if(!(I_length>=7)){
							break lab19;
						}
						// literal, line 281
						if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u009F\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
							break lab19;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab20:
					do{
						// literal, line 282
						if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00B2\u00E0\u00AF\u008D"))){
							break lab20;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab21:
					do{
						// literal, line 283
						if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u009F\u00E0\u00AF\u0088"))){
							break lab21;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab22:
					do{
						// literal, line 284
						if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00AE\u00E0\u00AE\u00B2\u00E0\u00AF\u008D"))){
							break lab22;
						}
						break lab9;
					}while(false);
					cursor=limit-v_10;
					lab23:
					do{
						// (, line 285
						// literal, line 285
						if(!(eq_s_b("\u00E0\u00AE\u00B2\u00E0\u00AF\u008D"))){
							break lab23;
						}
						// (, line 285
						// test, line 285
						int v_13=limit-cursor;
						// not, line 285
						{
							int v_14=limit-cursor;
							lab24:
							do{
								// among, line 285
								if(find_among_b(a_20)==0){
									break lab24;
								}
								break lab23;
							}while(false);
							cursor=limit-v_14;
						}
						cursor=limit-v_13;
						break lab9;
					}while(false);
					cursor=limit-v_10;
					// literal, line 286
					if(!(eq_s_b("\u00E0\u00AF\u0081\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
						break lab8;
					}
				}while(false);
				// ], line 287
				bra=cursor;
				// <-, line 287
				slice_from("\u00E0\u00AF\u008D");
				cursor=limit-v_9;
				break lab0;
			}while(false);
			cursor=limit-v_1;
			lab25:
			do{
				// test, line 290
				int v_15=limit-cursor;
				// (, line 290
				// [, line 290
				ket=cursor;
				// or, line 291
				lab26:
				do{
					int v_16=limit-cursor;
					lab27:
					do{
						// literal, line 291
						if(!(eq_s_b("\u00E0\u00AE\u0095\u00E0\u00AE\u00A3\u00E0\u00AF\u008D"))){
							break lab27;
						}
						break lab26;
					}while(false);
					cursor=limit-v_16;
					lab28:
					do{
						// literal, line 292
						if(!(eq_s_b("\u00E0\u00AE\u00AE\u00E0\u00AF\u0081\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
							break lab28;
						}
						break lab26;
					}while(false);
					cursor=limit-v_16;
					lab29:
					do{
						// literal, line 293
						if(!(eq_s_b("\u00E0\u00AE\u00AE\u00E0\u00AF\u0087\u00E0\u00AE\u00B2\u00E0\u00AF\u008D"))){
							break lab29;
						}
						break lab26;
					}while(false);
					cursor=limit-v_16;
					lab30:
					do{
						// literal, line 294
						if(!(eq_s_b("\u00E0\u00AE\u00AE\u00E0\u00AF\u0087\u00E0\u00AE\u00B1\u00E0\u00AF\u008D"))){
							break lab30;
						}
						break lab26;
					}while(false);
					cursor=limit-v_16;
					lab31:
					do{
						// literal, line 295
						if(!(eq_s_b("\u00E0\u00AE\u0095\u00E0\u00AF\u0080\u00E0\u00AE\u00B4\u00E0\u00AF\u008D"))){
							break lab31;
						}
						break lab26;
					}while(false);
					cursor=limit-v_16;
					lab32:
					do{
						// literal, line 296
						if(!(eq_s_b("\u00E0\u00AE\u00AA\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
							break lab32;
						}
						break lab26;
					}while(false);
					cursor=limit-v_16;
					// (, line 297
					// literal, line 297
					if(!(eq_s_b("\u00E0\u00AE\u00A4\u00E0\u00AF\u0081"))){
						break lab25;
					}
					// (, line 297
					// test, line 297
					int v_17=limit-cursor;
					// not, line 297
					{
						int v_18=limit-cursor;
						lab33:
						do{
							// among, line 297
							if(find_among_b(a_21)==0){
								break lab33;
							}
							break lab25;
						}while(false);
						cursor=limit-v_18;
					}
					cursor=limit-v_17;
				}while(false);
				// ], line 298
				bra=cursor;
				// delete, line 298
				slice_del();
				cursor=limit-v_15;
				break lab0;
			}while(false);
			cursor=limit-v_1;
			// test, line 301
			int v_19=limit-cursor;
			// (, line 301
			// [, line 301
			ket=cursor;
			// literal, line 301
			if(!(eq_s_b("\u00E0\u00AF\u0080"))){
				return false;
			}
			// ], line 301
			bra=cursor;
			// <-, line 301
			slice_from("\u00E0\u00AE\u00BF");
			cursor=limit-v_19;
		}while(false);
		// (, line 303
		// set found_a_match, line 303
		B_found_a_match=true;
		// (, line 304
		// set found_vetrumai_urupu, line 304
		B_found_vetrumai_urupu=true;
		// do, line 305
		int v_20=limit-cursor;
		lab34:
		do{
			// (, line 305
			// [, line 305
			ket=cursor;
			// literal, line 305
			if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
				break lab34;
			}
			// ], line 305
			bra=cursor;
			// <-, line 305
			slice_from("\u00E0\u00AF\u008D");
		}while(false);
		cursor=limit-v_20;
		cursor=limit_backward;
		// do, line 307
		lab35:
		do{
			// call fix_endings, line 307
			if(!r_fix_endings()){
				break lab35;
			}
		}while(false);
		return true;
	}
	private boolean r_remove_tense_suffixes(){
		// (, line 310
		// set found_a_match, line 311
		B_found_a_match=true;
		// repeat, line 312
		replab0:
		while(true){
			int v_1=cursor;
			lab1:
			do{
				// (, line 312
				// Boolean test found_a_match, line 312
				if(!(B_found_a_match)){
					break lab1;
				}
				// (, line 312
				// do, line 312
				int v_2=cursor;
				lab2:
				do{
					// call remove_tense_suffix, line 312
					if(!r_remove_tense_suffix()){
						break lab2;
					}
				}while(false);
				cursor=v_2;
				continue replab0;
			}while(false);
			cursor=v_1;
			break replab0;
		}
		return true;
	}
	private boolean r_remove_tense_suffix(){
		// (, line 315
		// unset found_a_match, line 316
		B_found_a_match=false;
		// call has_min_length, line 317
		if(!r_has_min_length()){
			return false;
		}
		// backwards, line 318
		limit_backward=cursor;
		cursor=limit;
		// (, line 318
		// do, line 319
		int v_1=limit-cursor;
		lab0:
		do{
			// (, line 319
			// or, line 326
			lab1:
			do{
				int v_2=limit-cursor;
				lab2:
				do{
					// test, line 320
					int v_3=limit-cursor;
					// (, line 320
					// [, line 320
					ket=cursor;
					// among, line 320
					if(find_among_b(a_22)==0){
						break lab2;
					}
					// ], line 323
					bra=cursor;
					// delete, line 323
					slice_del();
					// (, line 324
					// set found_a_match, line 324
					B_found_a_match=true;
					cursor=limit-v_3;
					break lab1;
				}while(false);
				cursor=limit-v_2;
				lab3:
				do{
					// test, line 327
					int v_4=limit-cursor;
					// (, line 327
					// [, line 327
					ket=cursor;
					// or, line 328
					lab4:
					do{
						int v_5=limit-cursor;
						lab5:
						do{
							// literal, line 328
							if(!(eq_s_b("\u00E0\u00AE\u00AE\u00E0\u00AE\u00BE\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab5;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab6:
						do{
							// literal, line 329
							if(!(eq_s_b("\u00E0\u00AE\u00AE\u00E0\u00AE\u00BF\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab6;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab7:
						do{
							// literal, line 330
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab7;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab8:
						do{
							// literal, line 331
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00BE\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab8;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab9:
						do{
							// literal, line 332
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00BE\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
								break lab9;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab10:
						do{
							// literal, line 333
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00BE\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab10;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab11:
						do{
							// (, line 334
							// literal, line 334
							if(!(eq_s_b("\u00E0\u00AE\u00B5\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab11;
							}
							// test, line 334
							int v_6=limit-cursor;
							// (, line 334
							// not, line 334
							{
								int v_7=limit-cursor;
								lab12:
								do{
									// among, line 334
									if(find_among_b(a_23)==0){
										break lab12;
									}
									break lab11;
								}while(false);
								cursor=limit-v_7;
							}
							cursor=limit-v_6;
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab13:
						do{
							// literal, line 335
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
								break lab13;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab14:
						do{
							// literal, line 336
							if(!(eq_s_b("\u00E0\u00AE\u00B5\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
								break lab14;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab15:
						do{
							// literal, line 337
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab15;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab16:
						do{
							// literal, line 338
							if(!(eq_s_b("\u00E0\u00AE\u00B5\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab16;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab17:
						do{
							// literal, line 339
							if(!(eq_s_b("\u00E0\u00AE\u00A9"))){
								break lab17;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab18:
						do{
							// literal, line 339
							if(!(eq_s_b("\u00E0\u00AE\u00AA"))){
								break lab18;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab19:
						do{
							// literal, line 339
							if(!(eq_s_b("\u00E0\u00AE\u0095"))){
								break lab19;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab20:
						do{
							// literal, line 339
							if(!(eq_s_b("\u00E0\u00AE\u00A4"))){
								break lab20;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab21:
						do{
							// literal, line 339
							if(!(eq_s_b("\u00E0\u00AE\u00AF"))){
								break lab21;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab22:
						do{
							// literal, line 340
							if(!(eq_s_b("\u00E0\u00AE\u00AA\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab22;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab23:
						do{
							// literal, line 341
							if(!(eq_s_b("\u00E0\u00AE\u00AA\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
								break lab23;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab24:
						do{
							// literal, line 342
							if(!(eq_s_b("\u00E0\u00AE\u00AA\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab24;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab25:
						do{
							// (, line 343
							// literal, line 343
							if(!(eq_s_b("\u00E0\u00AE\u00A4\u00E0\u00AF\u0081"))){
								break lab25;
							}
							// (, line 343
							// test, line 343
							int v_8=limit-cursor;
							// not, line 343
							{
								int v_9=limit-cursor;
								lab26:
								do{
									// among, line 343
									if(find_among_b(a_24)==0){
										break lab26;
									}
									break lab25;
								}while(false);
								cursor=limit-v_9;
							}
							cursor=limit-v_8;
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab27:
						do{
							// literal, line 344
							if(!(eq_s_b("\u00E0\u00AE\u00BF\u00E0\u00AE\u00B1\u00E0\u00AF\u008D\u00E0\u00AE\u00B1\u00E0\u00AF\u0081"))){
								break lab27;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab28:
						do{
							// literal, line 345
							if(!(eq_s_b("\u00E0\u00AE\u00AA\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab28;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab29:
						do{
							// literal, line 346
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab29;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab30:
						do{
							// literal, line 347
							if(!(eq_s_b("\u00E0\u00AE\u00A4\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab30;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab31:
						do{
							// literal, line 348
							if(!(eq_s_b("\u00E0\u00AE\u00B1\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab31;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab32:
						do{
							// literal, line 349
							if(!(eq_s_b("\u00E0\u00AE\u0095\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab32;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab33:
						do{
							// literal, line 350
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AF\u0086\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab33;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						lab34:
						do{
							// literal, line 351
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AF\u0088"))){
								break lab34;
							}
							break lab4;
						}while(false);
						cursor=limit-v_5;
						// literal, line 352
						if(!(eq_s_b("\u00E0\u00AE\u00B5\u00E0\u00AF\u0088"))){
							break lab3;
						}
					}while(false);
					// ], line 353
					bra=cursor;
					// delete, line 353
					slice_del();
					// (, line 354
					// set found_a_match, line 354
					B_found_a_match=true;
					cursor=limit-v_4;
					break lab1;
				}while(false);
				cursor=limit-v_2;
				lab35:
				do{
					// test, line 357
					int v_10=limit-cursor;
					// (, line 357
					// [, line 357
					ket=cursor;
					// or, line 358
					lab36:
					do{
						int v_11=limit-cursor;
						lab37:
						do{
							// (, line 358
							// literal, line 358
							if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab37;
							}
							// test, line 358
							int v_12=limit-cursor;
							// (, line 358
							// not, line 358
							{
								int v_13=limit-cursor;
								lab38:
								do{
									// literal, line 358
									if(!(eq_s_b("\u00E0\u00AE\u009A"))){
										break lab38;
									}
									break lab37;
								}while(false);
								cursor=limit-v_13;
							}
							cursor=limit-v_12;
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab39:
						do{
							// literal, line 359
							if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00B3\u00E0\u00AF\u008D"))){
								break lab39;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab40:
						do{
							// literal, line 360
							if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab40;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab41:
						do{
							// literal, line 361
							if(!(eq_s_b("\u00E0\u00AF\u0087\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab41;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab42:
						do{
							// literal, line 362
							if(!(eq_s_b("\u00E0\u00AE\u00BE"))){
								break lab42;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab43:
						do{
							// literal, line 363
							if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab43;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab44:
						do{
							// literal, line 364
							if(!(eq_s_b("\u00E0\u00AF\u0086\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab44;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab45:
						do{
							// literal, line 365
							if(!(eq_s_b("\u00E0\u00AF\u0087\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab45;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab46:
						do{
							// literal, line 366
							if(!(eq_s_b("\u00E0\u00AF\u008B\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab46;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab47:
						do{
							// literal, line 367
							if(!(eq_s_b("\u00E0\u00AE\u0095\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab47;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab48:
						do{
							// literal, line 368
							if(!(eq_s_b("\u00E0\u00AE\u00A4\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab48;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab49:
						do{
							// literal, line 369
							if(!(eq_s_b("\u00E0\u00AE\u009F\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab49;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab50:
						do{
							// literal, line 370
							if(!(eq_s_b("\u00E0\u00AE\u00B1\u00E0\u00AF\u0081\u00E0\u00AE\u00AE\u00E0\u00AF\u008D"))){
								break lab50;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab51:
						do{
							// literal, line 371
							if(!(eq_s_b("\u00E0\u00AE\u00BE\u00E0\u00AE\u00AF\u00E0\u00AF\u008D"))){
								break lab51;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab52:
						do{
							// literal, line 372
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AF\u0086\u00E0\u00AE\u00A9\u00E0\u00AF\u008D"))){
								break lab52;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab53:
						do{
							// literal, line 373
							if(!(eq_s_b("\u00E0\u00AE\u00A9\u00E0\u00AE\u00BF\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab53;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						lab54:
						do{
							// literal, line 374
							if(!(eq_s_b("\u00E0\u00AF\u0080\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
								break lab54;
							}
							break lab36;
						}while(false);
						cursor=limit-v_11;
						// literal, line 375
						if(!(eq_s_b("\u00E0\u00AF\u0080\u00E0\u00AE\u00AF\u00E0\u00AE\u00B0\u00E0\u00AF\u008D"))){
							break lab35;
						}
					}while(false);
					// ], line 376
					bra=cursor;
					// <-, line 376
					slice_from("\u00E0\u00AF\u008D");
					// (, line 377
					// set found_a_match, line 377
					B_found_a_match=true;
					cursor=limit-v_10;
					break lab1;
				}while(false);
				cursor=limit-v_2;
				// test, line 380
				int v_14=limit-cursor;
				// (, line 380
				// (, line 380
				// [, line 380
				ket=cursor;
				// or, line 380
				lab55:
				do{
					int v_15=limit-cursor;
					lab56:
					do{
						// literal, line 380
						if(!(eq_s_b("\u00E0\u00AE\u0095\u00E0\u00AF\u0081"))){
							break lab56;
						}
						break lab55;
					}while(false);
					cursor=limit-v_15;
					// literal, line 380
					if(!(eq_s_b("\u00E0\u00AE\u00A4\u00E0\u00AF\u0081"))){
						break lab0;
					}
				}while(false);
				// (, line 380
				// test, line 380
				int v_16=limit-cursor;
				// literal, line 380
				if(!(eq_s_b("\u00E0\u00AF\u008D"))){
					break lab0;
				}
				cursor=limit-v_16;
				// ], line 380
				bra=cursor;
				// delete, line 380
				slice_del();
				// (, line 381
				// set found_a_match, line 381
				B_found_a_match=true;
				cursor=limit-v_14;
			}while(false);
		}while(false);
		cursor=limit-v_1;
		// do, line 384
		int v_17=limit-cursor;
		lab57:
		do{
			// (, line 384
			// [, line 384
			ket=cursor;
			// among, line 384
			if(find_among_b(a_25)==0){
				break lab57;
			}
			// ], line 391
			bra=cursor;
			// delete, line 391
			slice_del();
			// (, line 392
			// set found_a_match, line 392
			B_found_a_match=true;
		}while(false);
		cursor=limit-v_17;
		cursor=limit_backward;
		// do, line 395
		lab58:
		do{
			// call fix_endings, line 395
			if(!r_fix_endings()){
				break lab58;
			}
		}while(false);
		return true;
	}
	public boolean stem(){
		// (, line 398
		// unset found_vetrumai_urupu, line 399
		B_found_vetrumai_urupu=false;
		// do, line 400
		int v_1=cursor;
		lab0:
		do{
			// call fix_ending, line 400
			if(!r_fix_ending()){
				break lab0;
			}
		}while(false);
		cursor=v_1;
		// call has_min_length, line 401
		if(!r_has_min_length()){
			return false;
		}
		// do, line 402
		int v_2=cursor;
		lab1:
		do{
			// call remove_question_prefixes, line 402
			if(!r_remove_question_prefixes()){
				break lab1;
			}
		}while(false);
		cursor=v_2;
		// do, line 403
		int v_3=cursor;
		lab2:
		do{
			// call remove_pronoun_prefixes, line 403
			if(!r_remove_pronoun_prefixes()){
				break lab2;
			}
		}while(false);
		cursor=v_3;
		// do, line 404
		int v_4=cursor;
		lab3:
		do{
			// call remove_question_suffixes, line 404
			if(!r_remove_question_suffixes()){
				break lab3;
			}
		}while(false);
		cursor=v_4;
		// do, line 405
		int v_5=cursor;
		lab4:
		do{
			// call remove_um, line 405
			if(!r_remove_um()){
				break lab4;
			}
		}while(false);
		cursor=v_5;
		// do, line 406
		int v_6=cursor;
		lab5:
		do{
			// call remove_common_word_endings, line 406
			if(!r_remove_common_word_endings()){
				break lab5;
			}
		}while(false);
		cursor=v_6;
		// do, line 407
		int v_7=cursor;
		lab6:
		do{
			// call remove_vetrumai_urupukal, line 407
			if(!r_remove_vetrumai_urupukal()){
				break lab6;
			}
		}while(false);
		cursor=v_7;
		// do, line 408
		int v_8=cursor;
		lab7:
		do{
			// call remove_plural_suffix, line 408
			if(!r_remove_plural_suffix()){
				break lab7;
			}
		}while(false);
		cursor=v_8;
		// do, line 409
		int v_9=cursor;
		lab8:
		do{
			// call remove_command_suffixes, line 409
			if(!r_remove_command_suffixes()){
				break lab8;
			}
		}while(false);
		cursor=v_9;
		// do, line 410
		int v_10=cursor;
		lab9:
		do{
			// call remove_tense_suffixes, line 410
			if(!r_remove_tense_suffixes()){
				break lab9;
			}
		}while(false);
		cursor=v_10;
		return true;
	}
	public boolean equals(Object o){
		return o instanceof TamilStemmer;
	}
	public int hashCode(){
		return TamilStemmer.class.getName().hashCode();
	}
}
