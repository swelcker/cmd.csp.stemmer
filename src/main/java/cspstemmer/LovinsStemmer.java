
// http://snowballstem.org/
package cspstemmer;

/**
 * This class was automatically generated by a Snowball to Java compiler It
 * implements the stemming algorithm defined by a snowball script.
 */
public class LovinsStemmer extends SnowballStemmer{
	private static final long serialVersionUID=1L;
	private final static Among a_0[]={
		new Among("d",-1,-1),
		new Among("f",-1,-1),
		new Among("ph",-1,-1),
		new Among("th",-1,-1),
		new Among("l",-1,-1),
		new Among("er",-1,-1),
		new Among("or",-1,-1),
		new Among("es",-1,-1),
		new Among("t",-1,-1)
	};
	private final static Among a_1[]={
		new Among("s'",-1,1,"r_A",LovinsStemmer.class),
		new Among("a",-1,1,"r_A",LovinsStemmer.class),
		new Among("ia",1,1,"r_A",LovinsStemmer.class),
		new Among("ata",1,1,"r_A",LovinsStemmer.class),
		new Among("ic",-1,1,"r_A",LovinsStemmer.class),
		new Among("aic",4,1,"r_A",LovinsStemmer.class),
		new Among("allic",4,1,"r_BB",LovinsStemmer.class),
		new Among("aric",4,1,"r_A",LovinsStemmer.class),
		new Among("atic",4,1,"r_B",LovinsStemmer.class),
		new Among("itic",4,1,"r_H",LovinsStemmer.class),
		new Among("antic",4,1,"r_C",LovinsStemmer.class),
		new Among("istic",4,1,"r_A",LovinsStemmer.class),
		new Among("alistic",11,1,"r_B",LovinsStemmer.class),
		new Among("aristic",11,1,"r_A",LovinsStemmer.class),
		new Among("ivistic",11,1,"r_A",LovinsStemmer.class),
		new Among("ed",-1,1,"r_E",LovinsStemmer.class),
		new Among("anced",15,1,"r_B",LovinsStemmer.class),
		new Among("enced",15,1,"r_A",LovinsStemmer.class),
		new Among("ished",15,1,"r_A",LovinsStemmer.class),
		new Among("ied",15,1,"r_A",LovinsStemmer.class),
		new Among("ened",15,1,"r_E",LovinsStemmer.class),
		new Among("ioned",15,1,"r_A",LovinsStemmer.class),
		new Among("ated",15,1,"r_I",LovinsStemmer.class),
		new Among("ented",15,1,"r_C",LovinsStemmer.class),
		new Among("ized",15,1,"r_F",LovinsStemmer.class),
		new Among("arized",24,1,"r_A",LovinsStemmer.class),
		new Among("oid",-1,1,"r_A",LovinsStemmer.class),
		new Among("aroid",26,1,"r_A",LovinsStemmer.class),
		new Among("hood",-1,1,"r_A",LovinsStemmer.class),
		new Among("ehood",28,1,"r_A",LovinsStemmer.class),
		new Among("ihood",28,1,"r_A",LovinsStemmer.class),
		new Among("elihood",30,1,"r_E",LovinsStemmer.class),
		new Among("ward",-1,1,"r_A",LovinsStemmer.class),
		new Among("e",-1,1,"r_A",LovinsStemmer.class),
		new Among("ae",33,1,"r_A",LovinsStemmer.class),
		new Among("ance",33,1,"r_B",LovinsStemmer.class),
		new Among("icance",35,1,"r_A",LovinsStemmer.class),
		new Among("ence",33,1,"r_A",LovinsStemmer.class),
		new Among("ide",33,1,"r_L",LovinsStemmer.class),
		new Among("icide",38,1,"r_A",LovinsStemmer.class),
		new Among("otide",38,1,"r_A",LovinsStemmer.class),
		new Among("age",33,1,"r_B",LovinsStemmer.class),
		new Among("able",33,1,"r_A",LovinsStemmer.class),
		new Among("atable",42,1,"r_A",LovinsStemmer.class),
		new Among("izable",42,1,"r_E",LovinsStemmer.class),
		new Among("arizable",44,1,"r_A",LovinsStemmer.class),
		new Among("ible",33,1,"r_A",LovinsStemmer.class),
		new Among("encible",46,1,"r_A",LovinsStemmer.class),
		new Among("ene",33,1,"r_E",LovinsStemmer.class),
		new Among("ine",33,1,"r_M",LovinsStemmer.class),
		new Among("idine",49,1,"r_I",LovinsStemmer.class),
		new Among("one",33,1,"r_R",LovinsStemmer.class),
		new Among("ature",33,1,"r_E",LovinsStemmer.class),
		new Among("eature",52,1,"r_Z",LovinsStemmer.class),
		new Among("ese",33,1,"r_A",LovinsStemmer.class),
		new Among("wise",33,1,"r_A",LovinsStemmer.class),
		new Among("ate",33,1,"r_A",LovinsStemmer.class),
		new Among("entiate",56,1,"r_A",LovinsStemmer.class),
		new Among("inate",56,1,"r_A",LovinsStemmer.class),
		new Among("ionate",56,1,"r_D",LovinsStemmer.class),
		new Among("ite",33,1,"r_AA",LovinsStemmer.class),
		new Among("ive",33,1,"r_A",LovinsStemmer.class),
		new Among("ative",61,1,"r_A",LovinsStemmer.class),
		new Among("ize",33,1,"r_F",LovinsStemmer.class),
		new Among("alize",63,1,"r_A",LovinsStemmer.class),
		new Among("icalize",64,1,"r_A",LovinsStemmer.class),
		new Among("ialize",64,1,"r_A",LovinsStemmer.class),
		new Among("entialize",66,1,"r_A",LovinsStemmer.class),
		new Among("ionalize",64,1,"r_A",LovinsStemmer.class),
		new Among("arize",63,1,"r_A",LovinsStemmer.class),
		new Among("ing",-1,1,"r_N",LovinsStemmer.class),
		new Among("ancing",70,1,"r_B",LovinsStemmer.class),
		new Among("encing",70,1,"r_A",LovinsStemmer.class),
		new Among("aging",70,1,"r_B",LovinsStemmer.class),
		new Among("ening",70,1,"r_E",LovinsStemmer.class),
		new Among("ioning",70,1,"r_A",LovinsStemmer.class),
		new Among("ating",70,1,"r_I",LovinsStemmer.class),
		new Among("enting",70,1,"r_C",LovinsStemmer.class),
		new Among("ying",70,1,"r_B",LovinsStemmer.class),
		new Among("izing",70,1,"r_F",LovinsStemmer.class),
		new Among("arizing",79,1,"r_A",LovinsStemmer.class),
		new Among("ish",-1,1,"r_C",LovinsStemmer.class),
		new Among("yish",81,1,"r_A",LovinsStemmer.class),
		new Among("i",-1,1,"r_A",LovinsStemmer.class),
		new Among("al",-1,1,"r_BB",LovinsStemmer.class),
		new Among("ical",84,1,"r_A",LovinsStemmer.class),
		new Among("aical",85,1,"r_A",LovinsStemmer.class),
		new Among("istical",85,1,"r_A",LovinsStemmer.class),
		new Among("oidal",84,1,"r_A",LovinsStemmer.class),
		new Among("eal",84,1,"r_Y",LovinsStemmer.class),
		new Among("ial",84,1,"r_A",LovinsStemmer.class),
		new Among("ancial",90,1,"r_A",LovinsStemmer.class),
		new Among("arial",90,1,"r_A",LovinsStemmer.class),
		new Among("ential",90,1,"r_A",LovinsStemmer.class),
		new Among("ional",84,1,"r_A",LovinsStemmer.class),
		new Among("ational",94,1,"r_B",LovinsStemmer.class),
		new Among("izational",95,1,"r_A",LovinsStemmer.class),
		new Among("ental",84,1,"r_A",LovinsStemmer.class),
		new Among("ful",-1,1,"r_A",LovinsStemmer.class),
		new Among("eful",98,1,"r_A",LovinsStemmer.class),
		new Among("iful",98,1,"r_A",LovinsStemmer.class),
		new Among("yl",-1,1,"r_R",LovinsStemmer.class),
		new Among("ism",-1,1,"r_B",LovinsStemmer.class),
		new Among("icism",102,1,"r_A",LovinsStemmer.class),
		new Among("oidism",102,1,"r_A",LovinsStemmer.class),
		new Among("alism",102,1,"r_B",LovinsStemmer.class),
		new Among("icalism",105,1,"r_A",LovinsStemmer.class),
		new Among("ionalism",105,1,"r_A",LovinsStemmer.class),
		new Among("inism",102,1,"r_J",LovinsStemmer.class),
		new Among("ativism",102,1,"r_A",LovinsStemmer.class),
		new Among("um",-1,1,"r_U",LovinsStemmer.class),
		new Among("ium",110,1,"r_A",LovinsStemmer.class),
		new Among("ian",-1,1,"r_A",LovinsStemmer.class),
		new Among("ician",112,1,"r_A",LovinsStemmer.class),
		new Among("en",-1,1,"r_F",LovinsStemmer.class),
		new Among("ogen",114,1,"r_A",LovinsStemmer.class),
		new Among("on",-1,1,"r_S",LovinsStemmer.class),
		new Among("ion",116,1,"r_Q",LovinsStemmer.class),
		new Among("ation",117,1,"r_B",LovinsStemmer.class),
		new Among("ication",118,1,"r_G",LovinsStemmer.class),
		new Among("entiation",118,1,"r_A",LovinsStemmer.class),
		new Among("ination",118,1,"r_A",LovinsStemmer.class),
		new Among("isation",118,1,"r_A",LovinsStemmer.class),
		new Among("arisation",122,1,"r_A",LovinsStemmer.class),
		new Among("entation",118,1,"r_A",LovinsStemmer.class),
		new Among("ization",118,1,"r_F",LovinsStemmer.class),
		new Among("arization",125,1,"r_A",LovinsStemmer.class),
		new Among("action",117,1,"r_G",LovinsStemmer.class),
		new Among("o",-1,1,"r_A",LovinsStemmer.class),
		new Among("ar",-1,1,"r_X",LovinsStemmer.class),
		new Among("ear",129,1,"r_Y",LovinsStemmer.class),
		new Among("ier",-1,1,"r_A",LovinsStemmer.class),
		new Among("ariser",-1,1,"r_A",LovinsStemmer.class),
		new Among("izer",-1,1,"r_F",LovinsStemmer.class),
		new Among("arizer",133,1,"r_A",LovinsStemmer.class),
		new Among("or",-1,1,"r_T",LovinsStemmer.class),
		new Among("ator",135,1,"r_A",LovinsStemmer.class),
		new Among("s",-1,1,"r_W",LovinsStemmer.class),
		new Among("'s",137,1,"r_A",LovinsStemmer.class),
		new Among("as",137,1,"r_B",LovinsStemmer.class),
		new Among("ics",137,1,"r_A",LovinsStemmer.class),
		new Among("istics",140,1,"r_A",LovinsStemmer.class),
		new Among("es",137,1,"r_E",LovinsStemmer.class),
		new Among("ances",142,1,"r_B",LovinsStemmer.class),
		new Among("ences",142,1,"r_A",LovinsStemmer.class),
		new Among("ides",142,1,"r_L",LovinsStemmer.class),
		new Among("oides",145,1,"r_A",LovinsStemmer.class),
		new Among("ages",142,1,"r_B",LovinsStemmer.class),
		new Among("ies",142,1,"r_P",LovinsStemmer.class),
		new Among("acies",148,1,"r_A",LovinsStemmer.class),
		new Among("ancies",148,1,"r_A",LovinsStemmer.class),
		new Among("encies",148,1,"r_A",LovinsStemmer.class),
		new Among("aries",148,1,"r_A",LovinsStemmer.class),
		new Among("ities",148,1,"r_A",LovinsStemmer.class),
		new Among("alities",153,1,"r_A",LovinsStemmer.class),
		new Among("ivities",153,1,"r_A",LovinsStemmer.class),
		new Among("ines",142,1,"r_M",LovinsStemmer.class),
		new Among("nesses",142,1,"r_A",LovinsStemmer.class),
		new Among("ates",142,1,"r_A",LovinsStemmer.class),
		new Among("atives",142,1,"r_A",LovinsStemmer.class),
		new Among("ings",137,1,"r_N",LovinsStemmer.class),
		new Among("is",137,1,"r_A",LovinsStemmer.class),
		new Among("als",137,1,"r_BB",LovinsStemmer.class),
		new Among("ials",162,1,"r_A",LovinsStemmer.class),
		new Among("entials",163,1,"r_A",LovinsStemmer.class),
		new Among("ionals",162,1,"r_A",LovinsStemmer.class),
		new Among("isms",137,1,"r_B",LovinsStemmer.class),
		new Among("ians",137,1,"r_A",LovinsStemmer.class),
		new Among("icians",167,1,"r_A",LovinsStemmer.class),
		new Among("ions",137,1,"r_B",LovinsStemmer.class),
		new Among("ations",169,1,"r_B",LovinsStemmer.class),
		new Among("arisations",170,1,"r_A",LovinsStemmer.class),
		new Among("entations",170,1,"r_A",LovinsStemmer.class),
		new Among("izations",170,1,"r_A",LovinsStemmer.class),
		new Among("arizations",173,1,"r_A",LovinsStemmer.class),
		new Among("ars",137,1,"r_O",LovinsStemmer.class),
		new Among("iers",137,1,"r_A",LovinsStemmer.class),
		new Among("izers",137,1,"r_F",LovinsStemmer.class),
		new Among("ators",137,1,"r_A",LovinsStemmer.class),
		new Among("less",137,1,"r_A",LovinsStemmer.class),
		new Among("eless",179,1,"r_A",LovinsStemmer.class),
		new Among("ness",137,1,"r_A",LovinsStemmer.class),
		new Among("eness",181,1,"r_E",LovinsStemmer.class),
		new Among("ableness",182,1,"r_A",LovinsStemmer.class),
		new Among("eableness",183,1,"r_E",LovinsStemmer.class),
		new Among("ibleness",182,1,"r_A",LovinsStemmer.class),
		new Among("ateness",182,1,"r_A",LovinsStemmer.class),
		new Among("iteness",182,1,"r_A",LovinsStemmer.class),
		new Among("iveness",182,1,"r_A",LovinsStemmer.class),
		new Among("ativeness",188,1,"r_A",LovinsStemmer.class),
		new Among("ingness",181,1,"r_A",LovinsStemmer.class),
		new Among("ishness",181,1,"r_A",LovinsStemmer.class),
		new Among("iness",181,1,"r_A",LovinsStemmer.class),
		new Among("ariness",192,1,"r_E",LovinsStemmer.class),
		new Among("alness",181,1,"r_A",LovinsStemmer.class),
		new Among("icalness",194,1,"r_A",LovinsStemmer.class),
		new Among("antialness",194,1,"r_A",LovinsStemmer.class),
		new Among("entialness",194,1,"r_A",LovinsStemmer.class),
		new Among("ionalness",194,1,"r_A",LovinsStemmer.class),
		new Among("fulness",181,1,"r_A",LovinsStemmer.class),
		new Among("lessness",181,1,"r_A",LovinsStemmer.class),
		new Among("ousness",181,1,"r_A",LovinsStemmer.class),
		new Among("eousness",201,1,"r_A",LovinsStemmer.class),
		new Among("iousness",201,1,"r_A",LovinsStemmer.class),
		new Among("itousness",201,1,"r_A",LovinsStemmer.class),
		new Among("entness",181,1,"r_A",LovinsStemmer.class),
		new Among("ants",137,1,"r_B",LovinsStemmer.class),
		new Among("ists",137,1,"r_A",LovinsStemmer.class),
		new Among("icists",207,1,"r_A",LovinsStemmer.class),
		new Among("us",137,1,"r_V",LovinsStemmer.class),
		new Among("ous",209,1,"r_A",LovinsStemmer.class),
		new Among("eous",210,1,"r_A",LovinsStemmer.class),
		new Among("aceous",211,1,"r_A",LovinsStemmer.class),
		new Among("antaneous",211,1,"r_A",LovinsStemmer.class),
		new Among("ious",210,1,"r_A",LovinsStemmer.class),
		new Among("acious",214,1,"r_B",LovinsStemmer.class),
		new Among("itous",210,1,"r_A",LovinsStemmer.class),
		new Among("ant",-1,1,"r_B",LovinsStemmer.class),
		new Among("icant",217,1,"r_A",LovinsStemmer.class),
		new Among("ent",-1,1,"r_C",LovinsStemmer.class),
		new Among("ement",219,1,"r_A",LovinsStemmer.class),
		new Among("izement",220,1,"r_A",LovinsStemmer.class),
		new Among("ist",-1,1,"r_A",LovinsStemmer.class),
		new Among("icist",222,1,"r_A",LovinsStemmer.class),
		new Among("alist",222,1,"r_A",LovinsStemmer.class),
		new Among("icalist",224,1,"r_A",LovinsStemmer.class),
		new Among("ialist",224,1,"r_A",LovinsStemmer.class),
		new Among("ionist",222,1,"r_A",LovinsStemmer.class),
		new Among("entist",222,1,"r_A",LovinsStemmer.class),
		new Among("y",-1,1,"r_B",LovinsStemmer.class),
		new Among("acy",229,1,"r_A",LovinsStemmer.class),
		new Among("ancy",229,1,"r_B",LovinsStemmer.class),
		new Among("ency",229,1,"r_A",LovinsStemmer.class),
		new Among("ly",229,1,"r_B",LovinsStemmer.class),
		new Among("ealy",233,1,"r_Y",LovinsStemmer.class),
		new Among("ably",233,1,"r_A",LovinsStemmer.class),
		new Among("ibly",233,1,"r_A",LovinsStemmer.class),
		new Among("edly",233,1,"r_E",LovinsStemmer.class),
		new Among("iedly",237,1,"r_A",LovinsStemmer.class),
		new Among("ely",233,1,"r_E",LovinsStemmer.class),
		new Among("ately",239,1,"r_A",LovinsStemmer.class),
		new Among("ively",239,1,"r_A",LovinsStemmer.class),
		new Among("atively",241,1,"r_A",LovinsStemmer.class),
		new Among("ingly",233,1,"r_B",LovinsStemmer.class),
		new Among("atingly",243,1,"r_A",LovinsStemmer.class),
		new Among("ily",233,1,"r_A",LovinsStemmer.class),
		new Among("lily",245,1,"r_A",LovinsStemmer.class),
		new Among("arily",245,1,"r_A",LovinsStemmer.class),
		new Among("ally",233,1,"r_B",LovinsStemmer.class),
		new Among("ically",248,1,"r_A",LovinsStemmer.class),
		new Among("aically",249,1,"r_A",LovinsStemmer.class),
		new Among("allically",249,1,"r_C",LovinsStemmer.class),
		new Among("istically",249,1,"r_A",LovinsStemmer.class),
		new Among("alistically",252,1,"r_B",LovinsStemmer.class),
		new Among("oidally",248,1,"r_A",LovinsStemmer.class),
		new Among("ially",248,1,"r_A",LovinsStemmer.class),
		new Among("entially",255,1,"r_A",LovinsStemmer.class),
		new Among("ionally",248,1,"r_A",LovinsStemmer.class),
		new Among("ationally",257,1,"r_B",LovinsStemmer.class),
		new Among("izationally",258,1,"r_B",LovinsStemmer.class),
		new Among("entally",248,1,"r_A",LovinsStemmer.class),
		new Among("fully",233,1,"r_A",LovinsStemmer.class),
		new Among("efully",261,1,"r_A",LovinsStemmer.class),
		new Among("ifully",261,1,"r_A",LovinsStemmer.class),
		new Among("enly",233,1,"r_E",LovinsStemmer.class),
		new Among("arly",233,1,"r_K",LovinsStemmer.class),
		new Among("early",265,1,"r_Y",LovinsStemmer.class),
		new Among("lessly",233,1,"r_A",LovinsStemmer.class),
		new Among("ously",233,1,"r_A",LovinsStemmer.class),
		new Among("eously",268,1,"r_A",LovinsStemmer.class),
		new Among("iously",268,1,"r_A",LovinsStemmer.class),
		new Among("ently",233,1,"r_A",LovinsStemmer.class),
		new Among("ary",229,1,"r_F",LovinsStemmer.class),
		new Among("ery",229,1,"r_E",LovinsStemmer.class),
		new Among("icianry",229,1,"r_A",LovinsStemmer.class),
		new Among("atory",229,1,"r_A",LovinsStemmer.class),
		new Among("ity",229,1,"r_A",LovinsStemmer.class),
		new Among("acity",276,1,"r_A",LovinsStemmer.class),
		new Among("icity",276,1,"r_A",LovinsStemmer.class),
		new Among("eity",276,1,"r_A",LovinsStemmer.class),
		new Among("ality",276,1,"r_A",LovinsStemmer.class),
		new Among("icality",280,1,"r_A",LovinsStemmer.class),
		new Among("iality",280,1,"r_A",LovinsStemmer.class),
		new Among("antiality",282,1,"r_A",LovinsStemmer.class),
		new Among("entiality",282,1,"r_A",LovinsStemmer.class),
		new Among("ionality",280,1,"r_A",LovinsStemmer.class),
		new Among("elity",276,1,"r_A",LovinsStemmer.class),
		new Among("ability",276,1,"r_A",LovinsStemmer.class),
		new Among("izability",287,1,"r_A",LovinsStemmer.class),
		new Among("arizability",288,1,"r_A",LovinsStemmer.class),
		new Among("ibility",276,1,"r_A",LovinsStemmer.class),
		new Among("inity",276,1,"r_CC",LovinsStemmer.class),
		new Among("arity",276,1,"r_B",LovinsStemmer.class),
		new Among("ivity",276,1,"r_A",LovinsStemmer.class)
	};
	private final static Among a_2[]={
		new Among("bb",-1,-1),
		new Among("dd",-1,-1),
		new Among("gg",-1,-1),
		new Among("ll",-1,-1),
		new Among("mm",-1,-1),
		new Among("nn",-1,-1),
		new Among("pp",-1,-1),
		new Among("rr",-1,-1),
		new Among("ss",-1,-1),
		new Among("tt",-1,-1)
	};
	private final static Among a_3[]={
		new Among("uad",-1,18),
		new Among("vad",-1,19),
		new Among("cid",-1,20),
		new Among("lid",-1,21),
		new Among("erid",-1,22),
		new Among("pand",-1,23),
		new Among("end",-1,24),
		new Among("ond",-1,25),
		new Among("lud",-1,26),
		new Among("rud",-1,27),
		new Among("ul",-1,9),
		new Among("her",-1,28),
		new Among("metr",-1,7),
		new Among("istr",-1,6),
		new Among("urs",-1,5),
		new Among("uct",-1,2),
		new Among("et",-1,32),
		new Among("mit",-1,29),
		new Among("ent",-1,30),
		new Among("umpt",-1,3),
		new Among("rpt",-1,4),
		new Among("ert",-1,31),
		new Among("yt",-1,33),
		new Among("iev",-1,1),
		new Among("olv",-1,8),
		new Among("ax",-1,14),
		new Among("ex",-1,15),
		new Among("bex",26,10),
		new Among("dex",26,11),
		new Among("pex",26,12),
		new Among("tex",26,13),
		new Among("ix",-1,16),
		new Among("lux",-1,17),
		new Among("yz",-1,33)
	};
	public boolean r_A(){
		// (, line 21
		// hop, line 21
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		return true;
	}
	public boolean r_B(){
		// (, line 22
		// hop, line 22
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		return true;
	}
	public boolean r_C(){
		// (, line 23
		// hop, line 23
		{
			int c=cursor-4;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		return true;
	}
	public boolean r_D(){
		// (, line 24
		// hop, line 24
		{
			int c=cursor-5;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		return true;
	}
	public boolean r_E(){
		// (, line 25
		// test, line 25
		int v_1=limit-cursor;
		// hop, line 25
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 25
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 25
				if(!(eq_s_b("e"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		return true;
	}
	public boolean r_F(){
		// (, line 26
		// test, line 26
		int v_1=limit-cursor;
		// hop, line 26
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 26
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 26
				if(!(eq_s_b("e"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		return true;
	}
	public boolean r_G(){
		// (, line 27
		// test, line 27
		int v_1=limit-cursor;
		// hop, line 27
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// literal, line 27
		if(!(eq_s_b("f"))){
			return false;
		}
		return true;
	}
	public boolean r_H(){
		// (, line 28
		// test, line 28
		int v_1=limit-cursor;
		// hop, line 28
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 28
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 28
				if(!(eq_s_b("t"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// literal, line 28
			if(!(eq_s_b("ll"))){
				return false;
			}
		}while(false);
		return true;
	}
	public boolean r_I(){
		// (, line 29
		// test, line 29
		int v_1=limit-cursor;
		// hop, line 29
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 29
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 29
				if(!(eq_s_b("o"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		// not, line 29
		{
			int v_3=limit-cursor;
			lab1:
			do{
				// literal, line 29
				if(!(eq_s_b("e"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		return true;
	}
	public boolean r_J(){
		// (, line 30
		// test, line 30
		int v_1=limit-cursor;
		// hop, line 30
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 30
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 30
				if(!(eq_s_b("a"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		// not, line 30
		{
			int v_3=limit-cursor;
			lab1:
			do{
				// literal, line 30
				if(!(eq_s_b("e"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		return true;
	}
	public boolean r_K(){
		// (, line 31
		// test, line 31
		int v_1=limit-cursor;
		// hop, line 31
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 31
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 31
				if(!(eq_s_b("l"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			lab2:
			do{
				// literal, line 31
				if(!(eq_s_b("i"))){
					break lab2;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// (, line 31
			// literal, line 31
			if(!(eq_s_b("e"))){
				return false;
			}
			// next, line 31
			if(cursor<=limit_backward){
				return false;
			}
			cursor--;
			// literal, line 31
			if(!(eq_s_b("u"))){
				return false;
			}
		}while(false);
		return true;
	}
	public boolean r_L(){
		// (, line 32
		// test, line 32
		int v_1=limit-cursor;
		// hop, line 32
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 32
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 32
				if(!(eq_s_b("u"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		// not, line 32
		{
			int v_3=limit-cursor;
			lab1:
			do{
				// literal, line 32
				if(!(eq_s_b("x"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		// not, line 32
		{
			int v_4=limit-cursor;
			lab2:
			do{
				// (, line 32
				// literal, line 32
				if(!(eq_s_b("s"))){
					break lab2;
				}
				// not, line 32
				{
					int v_5=limit-cursor;
					lab3:
					do{
						// literal, line 32
						if(!(eq_s_b("o"))){
							break lab3;
						}
						break lab2;
					}while(false);
					cursor=limit-v_5;
				}
				return false;
			}while(false);
			cursor=limit-v_4;
		}
		return true;
	}
	public boolean r_M(){
		// (, line 33
		// test, line 33
		int v_1=limit-cursor;
		// hop, line 33
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 33
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 33
				if(!(eq_s_b("a"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		// not, line 33
		{
			int v_3=limit-cursor;
			lab1:
			do{
				// literal, line 33
				if(!(eq_s_b("c"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		// not, line 33
		{
			int v_4=limit-cursor;
			lab2:
			do{
				// literal, line 33
				if(!(eq_s_b("e"))){
					break lab2;
				}
				return false;
			}while(false);
			cursor=limit-v_4;
		}
		// not, line 33
		{
			int v_5=limit-cursor;
			lab3:
			do{
				// literal, line 33
				if(!(eq_s_b("m"))){
					break lab3;
				}
				return false;
			}while(false);
			cursor=limit-v_5;
		}
		return true;
	}
	public boolean r_N(){
		// (, line 34
		// test, line 34
		int v_1=limit-cursor;
		// hop, line 34
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// (, line 34
		// hop, line 34
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		// or, line 34
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// not, line 34
				{
					int v_3=limit-cursor;
					lab2:
					do{
						// literal, line 34
						if(!(eq_s_b("s"))){
							break lab2;
						}
						break lab1;
					}while(false);
					cursor=limit-v_3;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// hop, line 34
			{
				int c=cursor-2;
				if(limit_backward>c||c>limit){
					return false;
				}
				cursor=c;
			}
		}while(false);
		return true;
	}
	public boolean r_O(){
		// (, line 35
		// test, line 35
		int v_1=limit-cursor;
		// hop, line 35
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 35
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 35
				if(!(eq_s_b("l"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// literal, line 35
			if(!(eq_s_b("i"))){
				return false;
			}
		}while(false);
		return true;
	}
	public boolean r_P(){
		// (, line 36
		// test, line 36
		int v_1=limit-cursor;
		// hop, line 36
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 36
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 36
				if(!(eq_s_b("c"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		return true;
	}
	public boolean r_Q(){
		// (, line 37
		// test, line 37
		int v_1=limit-cursor;
		// hop, line 37
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// test, line 37
		int v_2=limit-cursor;
		// hop, line 37
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_2;
		// not, line 37
		{
			int v_3=limit-cursor;
			lab0:
			do{
				// literal, line 37
				if(!(eq_s_b("l"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		// not, line 37
		{
			int v_4=limit-cursor;
			lab1:
			do{
				// literal, line 37
				if(!(eq_s_b("n"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_4;
		}
		return true;
	}
	public boolean r_R(){
		// (, line 38
		// test, line 38
		int v_1=limit-cursor;
		// hop, line 38
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 38
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 38
				if(!(eq_s_b("n"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// literal, line 38
			if(!(eq_s_b("r"))){
				return false;
			}
		}while(false);
		return true;
	}
	public boolean r_S(){
		// (, line 39
		// test, line 39
		int v_1=limit-cursor;
		// hop, line 39
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 39
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 39
				if(!(eq_s_b("dr"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// (, line 39
			// literal, line 39
			if(!(eq_s_b("t"))){
				return false;
			}
			// not, line 39
			{
				int v_3=limit-cursor;
				lab2:
				do{
					// literal, line 39
					if(!(eq_s_b("t"))){
						break lab2;
					}
					return false;
				}while(false);
				cursor=limit-v_3;
			}
		}while(false);
		return true;
	}
	public boolean r_T(){
		// (, line 40
		// test, line 40
		int v_1=limit-cursor;
		// hop, line 40
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 40
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 40
				if(!(eq_s_b("s"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// (, line 40
			// literal, line 40
			if(!(eq_s_b("t"))){
				return false;
			}
			// not, line 40
			{
				int v_3=limit-cursor;
				lab2:
				do{
					// literal, line 40
					if(!(eq_s_b("o"))){
						break lab2;
					}
					return false;
				}while(false);
				cursor=limit-v_3;
			}
		}while(false);
		return true;
	}
	public boolean r_U(){
		// (, line 41
		// test, line 41
		int v_1=limit-cursor;
		// hop, line 41
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 41
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 41
				if(!(eq_s_b("l"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			lab2:
			do{
				// literal, line 41
				if(!(eq_s_b("m"))){
					break lab2;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			lab3:
			do{
				// literal, line 41
				if(!(eq_s_b("n"))){
					break lab3;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// literal, line 41
			if(!(eq_s_b("r"))){
				return false;
			}
		}while(false);
		return true;
	}
	public boolean r_V(){
		// (, line 42
		// test, line 42
		int v_1=limit-cursor;
		// hop, line 42
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// literal, line 42
		if(!(eq_s_b("c"))){
			return false;
		}
		return true;
	}
	public boolean r_W(){
		// (, line 43
		// test, line 43
		int v_1=limit-cursor;
		// hop, line 43
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 43
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 43
				if(!(eq_s_b("s"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		// not, line 43
		{
			int v_3=limit-cursor;
			lab1:
			do{
				// literal, line 43
				if(!(eq_s_b("u"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		return true;
	}
	public boolean r_X(){
		// (, line 44
		// test, line 44
		int v_1=limit-cursor;
		// hop, line 44
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// or, line 44
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				// literal, line 44
				if(!(eq_s_b("l"))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			lab2:
			do{
				// literal, line 44
				if(!(eq_s_b("i"))){
					break lab2;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// (, line 44
			// literal, line 44
			if(!(eq_s_b("e"))){
				return false;
			}
			// next, line 44
			if(cursor<=limit_backward){
				return false;
			}
			cursor--;
			// literal, line 44
			if(!(eq_s_b("u"))){
				return false;
			}
		}while(false);
		return true;
	}
	public boolean r_Y(){
		// (, line 45
		// test, line 45
		int v_1=limit-cursor;
		// hop, line 45
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// literal, line 45
		if(!(eq_s_b("in"))){
			return false;
		}
		return true;
	}
	public boolean r_Z(){
		// (, line 46
		// test, line 46
		int v_1=limit-cursor;
		// hop, line 46
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 46
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 46
				if(!(eq_s_b("f"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		return true;
	}
	public boolean r_AA(){
		// (, line 47
		// test, line 47
		int v_1=limit-cursor;
		// hop, line 47
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// among, line 47
		if(find_among_b(a_0)==0){
			return false;
		}
		return true;
	}
	public boolean r_BB(){
		// (, line 49
		// test, line 49
		int v_1=limit-cursor;
		// hop, line 49
		{
			int c=cursor-3;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// not, line 49
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 49
				if(!(eq_s_b("met"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		// not, line 49
		{
			int v_3=limit-cursor;
			lab1:
			do{
				// literal, line 49
				if(!(eq_s_b("ryst"))){
					break lab1;
				}
				return false;
			}while(false);
			cursor=limit-v_3;
		}
		return true;
	}
	public boolean r_CC(){
		// (, line 50
		// test, line 50
		int v_1=limit-cursor;
		// hop, line 50
		{
			int c=cursor-2;
			if(limit_backward>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=limit-v_1;
		// literal, line 50
		if(!(eq_s_b("l"))){
			return false;
		}
		return true;
	}
	private boolean r_endings(){
		int among_var;
		// (, line 55
		// [, line 56
		ket=cursor;
		// substring, line 56
		among_var=find_among_b(a_1);
		if(among_var==0){
			return false;
		}
		// ], line 56
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 145
				// delete, line 145
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_undouble(){
		// (, line 151
		// test, line 152
		int v_1=limit-cursor;
		// substring, line 152
		if(find_among_b(a_2)==0){
			return false;
		}
		cursor=limit-v_1;
		// [, line 154
		ket=cursor;
		// next, line 154
		if(cursor<=limit_backward){
			return false;
		}
		cursor--;
		// ], line 154
		bra=cursor;
		// delete, line 154
		slice_del();
		return true;
	}
	private boolean r_respell(){
		int among_var;
		// (, line 159
		// [, line 160
		ket=cursor;
		// substring, line 160
		among_var=find_among_b(a_3);
		if(among_var==0){
			return false;
		}
		// ], line 160
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 161
				// <-, line 161
				slice_from("ief");
				break;
			case 2:
				// (, line 162
				// <-, line 162
				slice_from("uc");
				break;
			case 3:
				// (, line 163
				// <-, line 163
				slice_from("um");
				break;
			case 4:
				// (, line 164
				// <-, line 164
				slice_from("rb");
				break;
			case 5:
				// (, line 165
				// <-, line 165
				slice_from("ur");
				break;
			case 6:
				// (, line 166
				// <-, line 166
				slice_from("ister");
				break;
			case 7:
				// (, line 167
				// <-, line 167
				slice_from("meter");
				break;
			case 8:
				// (, line 168
				// <-, line 168
				slice_from("olut");
				break;
			case 9: // (, line 169
			// not, line 169
			{
				int v_1=limit-cursor;
				lab0:
				do{
					// literal, line 169
					if(!(eq_s_b("a"))){
						break lab0;
					}
					return false;
				}while(false);
				cursor=limit-v_1;
			}
			// not, line 169
			 {
				int v_2=limit-cursor;
				lab1:
				do{
					// literal, line 169
					if(!(eq_s_b("i"))){
						break lab1;
					}
					return false;
				}while(false);
				cursor=limit-v_2;
			}
			// not, line 169
			 {
				int v_3=limit-cursor;
				lab2:
				do{
					// literal, line 169
					if(!(eq_s_b("o"))){
						break lab2;
					}
					return false;
				}while(false);
				cursor=limit-v_3;
			}
			// <-, line 169
			slice_from("l");
			break;
			case 10:
				// (, line 170
				// <-, line 170
				slice_from("bic");
				break;
			case 11:
				// (, line 171
				// <-, line 171
				slice_from("dic");
				break;
			case 12:
				// (, line 172
				// <-, line 172
				slice_from("pic");
				break;
			case 13:
				// (, line 173
				// <-, line 173
				slice_from("tic");
				break;
			case 14:
				// (, line 174
				// <-, line 174
				slice_from("ac");
				break;
			case 15:
				// (, line 175
				// <-, line 175
				slice_from("ec");
				break;
			case 16:
				// (, line 176
				// <-, line 176
				slice_from("ic");
				break;
			case 17:
				// (, line 177
				// <-, line 177
				slice_from("luc");
				break;
			case 18:
				// (, line 178
				// <-, line 178
				slice_from("uas");
				break;
			case 19:
				// (, line 179
				// <-, line 179
				slice_from("vas");
				break;
			case 20:
				// (, line 180
				// <-, line 180
				slice_from("cis");
				break;
			case 21:
				// (, line 181
				// <-, line 181
				slice_from("lis");
				break;
			case 22:
				// (, line 182
				// <-, line 182
				slice_from("eris");
				break;
			case 23:
				// (, line 183
				// <-, line 183
				slice_from("pans");
				break;
			case 24: // (, line 184
			// not, line 184
			{
				int v_4=limit-cursor;
				lab3:
				do{
					// literal, line 184
					if(!(eq_s_b("s"))){
						break lab3;
					}
					return false;
				}while(false);
				cursor=limit-v_4;
			}
			// <-, line 184
			slice_from("ens");
			break;
			case 25:
				// (, line 185
				// <-, line 185
				slice_from("ons");
				break;
			case 26:
				// (, line 186
				// <-, line 186
				slice_from("lus");
				break;
			case 27:
				// (, line 187
				// <-, line 187
				slice_from("rus");
				break;
			case 28: // (, line 188
			// not, line 188
			{
				int v_5=limit-cursor;
				lab4:
				do{
					// literal, line 188
					if(!(eq_s_b("p"))){
						break lab4;
					}
					return false;
				}while(false);
				cursor=limit-v_5;
			}
			// not, line 188
			 {
				int v_6=limit-cursor;
				lab5:
				do{
					// literal, line 188
					if(!(eq_s_b("t"))){
						break lab5;
					}
					return false;
				}while(false);
				cursor=limit-v_6;
			}
			// <-, line 188
			slice_from("hes");
			break;
			case 29:
				// (, line 189
				// <-, line 189
				slice_from("mis");
				break;
			case 30: // (, line 190
			// not, line 190
			{
				int v_7=limit-cursor;
				lab6:
				do{
					// literal, line 190
					if(!(eq_s_b("m"))){
						break lab6;
					}
					return false;
				}while(false);
				cursor=limit-v_7;
			}
			// <-, line 190
			slice_from("ens");
			break;
			case 31:
				// (, line 192
				// <-, line 192
				slice_from("ers");
				break;
			case 32: // (, line 193
			// not, line 193
			{
				int v_8=limit-cursor;
				lab7:
				do{
					// literal, line 193
					if(!(eq_s_b("n"))){
						break lab7;
					}
					return false;
				}while(false);
				cursor=limit-v_8;
			}
			// <-, line 193
			slice_from("es");
			break;
			case 33:
				// (, line 194
				// <-, line 194
				slice_from("ys");
				break;
		}
		return true;
	}
	public boolean stem(){
		// (, line 200
		// backwards, line 202
		limit_backward=cursor;
		cursor=limit;
		// (, line 202
		// do, line 203
		int v_1=limit-cursor;
		lab0:
		do{
			// call endings, line 203
			if(!r_endings()){
				break lab0;
			}
		}while(false);
		cursor=limit-v_1;
		// do, line 204
		int v_2=limit-cursor;
		lab1:
		do{
			// call undouble, line 204
			if(!r_undouble()){
				break lab1;
			}
		}while(false);
		cursor=limit-v_2;
		// do, line 205
		int v_3=limit-cursor;
		lab2:
		do{
			// call respell, line 205
			if(!r_respell()){
				break lab2;
			}
		}while(false);
		cursor=limit-v_3;
		cursor=limit_backward;
		return true;
	}
	public boolean equals(Object o){
		return o instanceof LovinsStemmer;
	}
	public int hashCode(){
		return LovinsStemmer.class.getName().hashCode();
	}
}
