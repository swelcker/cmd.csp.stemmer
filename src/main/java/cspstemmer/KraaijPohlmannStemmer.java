
// http://snowballstem.org/
package cspstemmer;

/**
 * This class was automatically generated by a Snowball to Java compiler It
 * implements the stemming algorithm defined by a snowball script.
 */
public class KraaijPohlmannStemmer extends SnowballStemmer{
	private static final long serialVersionUID=1L;
	private final static Among a_0[]={
		new Among("nde",-1,7),
		new Among("en",-1,6),
		new Among("s",-1,2),
		new Among("'s",2,1),
		new Among("es",2,4),
		new Among("ies",4,3),
		new Among("aus",2,5)
	};
	private final static Among a_1[]={
		new Among("de",-1,5),
		new Among("ge",-1,2),
		new Among("ische",-1,4),
		new Among("je",-1,1),
		new Among("lijke",-1,3),
		new Among("le",-1,9),
		new Among("ene",-1,10),
		new Among("re",-1,8),
		new Among("se",-1,7),
		new Among("te",-1,6),
		new Among("ieve",-1,11)
	};
	private final static Among a_2[]={
		new Among("heid",-1,3),
		new Among("fie",-1,6),
		new Among("gie",-1,7),
		new Among("atie",-1,1),
		new Among("isme",-1,2),
		new Among("ing",-1,2),
		new Among("arij",-1,5),
		new Among("erij",-1,2),
		new Among("sel",-1,3),
		new Among("rder",-1,4),
		new Among("ster",-1,3),
		new Among("iteit",-1,2),
		new Among("dst",-1,9),
		new Among("tst",-1,8)
	};
	private final static Among a_3[]={
		new Among("end",-1,9),
		new Among("atief",-1,2),
		new Among("erig",-1,9),
		new Among("achtig",-1,3),
		new Among("ioneel",-1,1),
		new Among("baar",-1,3),
		new Among("laar",-1,5),
		new Among("naar",-1,4),
		new Among("raar",-1,6),
		new Among("eriger",-1,9),
		new Among("achtiger",-1,3),
		new Among("lijker",-1,8),
		new Among("tant",-1,7),
		new Among("erigst",-1,9),
		new Among("achtigst",-1,3),
		new Among("lijkst",-1,8)
	};
	private final static Among a_4[]={
		new Among("ig",-1,1),
		new Among("iger",-1,1),
		new Among("igst",-1,1)
	};
	private final static Among a_5[]={
		new Among("ft",-1,2),
		new Among("kt",-1,1),
		new Among("pt",-1,3)
	};
	private final static Among a_6[]={
		new Among("bb",-1,1),
		new Among("cc",-1,2),
		new Among("dd",-1,3),
		new Among("ff",-1,4),
		new Among("gg",-1,5),
		new Among("hh",-1,6),
		new Among("jj",-1,7),
		new Among("kk",-1,8),
		new Among("ll",-1,9),
		new Among("mm",-1,10),
		new Among("nn",-1,11),
		new Among("pp",-1,12),
		new Among("qq",-1,13),
		new Among("rr",-1,14),
		new Among("ss",-1,15),
		new Among("tt",-1,16),
		new Among("v",-1,4),
		new Among("vv",16,17),
		new Among("ww",-1,18),
		new Among("xx",-1,19),
		new Among("z",-1,15),
		new Among("zz",20,20)
	};
	private final static Among a_7[]={
		new Among("d",-1,1),
		new Among("t",-1,2)
	};
	private static final char g_v[]={17,65,16,1};
	private static final char g_v_WX[]={17,65,208,1};
	private static final char g_AOU[]={1,64,16};
	private static final char g_AIOU[]={1,65,16};
	private boolean B_GE_removed;
	private boolean B_stemmed;
	private boolean B_Y_found;
	private int I_p2;
	private int I_p1;
	private StringBuilder S_ch=new StringBuilder();
	private boolean r_R1(){
		// (, line 30
		if(!(I_p1<=cursor)){
			return false;
		}
		return true;
	}
	private boolean r_R2(){
		// (, line 31
		if(!(I_p2<=cursor)){
			return false;
		}
		return true;
	}
	private boolean r_V(){
		// test, line 33
		int v_1=limit-cursor;
		// (, line 33
		// or, line 33
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				if(!(in_grouping_b(g_v,97,121))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// literal, line 33
			if(!(eq_s_b("ij"))){
				return false;
			}
		}while(false);
		cursor=limit-v_1;
		return true;
	}
	private boolean r_VX(){
		// test, line 34
		int v_1=limit-cursor;
		// (, line 34
		// next, line 34
		if(cursor<=limit_backward){
			return false;
		}
		cursor--;
		// or, line 34
		lab0:
		do{
			int v_2=limit-cursor;
			lab1:
			do{
				if(!(in_grouping_b(g_v,97,121))){
					break lab1;
				}
				break lab0;
			}while(false);
			cursor=limit-v_2;
			// literal, line 34
			if(!(eq_s_b("ij"))){
				return false;
			}
		}while(false);
		cursor=limit-v_1;
		return true;
	}
	private boolean r_C(){
		// test, line 35
		int v_1=limit-cursor;
		// (, line 35
		// not, line 35
		{
			int v_2=limit-cursor;
			lab0:
			do{
				// literal, line 35
				if(!(eq_s_b("ij"))){
					break lab0;
				}
				return false;
			}while(false);
			cursor=limit-v_2;
		}
		if(!(out_grouping_b(g_v,97,121))){
			return false;
		}
		cursor=limit-v_1;
		return true;
	}
	private boolean r_lengthen_V(){
		// do, line 37
		int v_1=limit-cursor;
		lab0:
		do{
			// (, line 37
			if(!(out_grouping_b(g_v_WX,97,121))){
				break lab0;
			}
			// [, line 38
			ket=cursor;
			// or, line 38
			lab1:
			do{
				int v_2=limit-cursor;
				lab2:
				do{
					// (, line 38
					if(!(in_grouping_b(g_AOU,97,117))){
						break lab2;
					}
					// ], line 38
					bra=cursor;
					// test, line 38
					int v_3=limit-cursor;
					// (, line 38
					// or, line 38
					lab3:
					do{
						int v_4=limit-cursor;
						lab4:
						do{
							if(!(out_grouping_b(g_v,97,121))){
								break lab4;
							}
							break lab3;
						}while(false);
						cursor=limit-v_4;
						// atlimit, line 38
						if(cursor>limit_backward){
							break lab2;
						}
					}while(false);
					cursor=limit-v_3;
					break lab1;
				}while(false);
				cursor=limit-v_2;
				// (, line 39
				// literal, line 39
				if(!(eq_s_b("e"))){
					break lab0;
				}
				// ], line 39
				bra=cursor;
				// test, line 39
				int v_5=limit-cursor;
				// (, line 39
				// or, line 39
				lab5:
				do{
					int v_6=limit-cursor;
					lab6:
					do{
						if(!(out_grouping_b(g_v,97,121))){
							break lab6;
						}
						break lab5;
					}while(false);
					cursor=limit-v_6;
					// atlimit, line 39
					if(cursor>limit_backward){
						break lab0;
					}
				}while(false);
				// not, line 40
				{
					int v_7=limit-cursor;
					lab7:
					do{
						if(!(in_grouping_b(g_AIOU,97,117))){
							break lab7;
						}
						break lab0;
					}while(false);
					cursor=limit-v_7;
				}
				// not, line 41
				{
					int v_8=limit-cursor;
					lab8:
					do{
						// (, line 41
						// next, line 41
						if(cursor<=limit_backward){
							break lab8;
						}
						cursor--;
						if(!(in_grouping_b(g_AIOU,97,117))){
							break lab8;
						}
						if(!(out_grouping_b(g_v,97,121))){
							break lab8;
						}
						break lab0;
					}while(false);
					cursor=limit-v_8;
				}
				cursor=limit-v_5;
			}while(false);
			// -> ch, line 42
			slice_to(S_ch);
			// <+ ch, line 42
			{
				int c=cursor;
				insert(cursor,cursor,S_ch);
				cursor=c;
			}
		}while(false);
		cursor=limit-v_1;
		return true;
	}
	private boolean r_Step_1(){
		int among_var;
		// (, line 46
		// [, line 47
		ket=cursor;
		// among, line 47
		among_var=find_among_b(a_0);
		if(among_var==0){
			return false;
		}
		// (, line 47
		// ], line 47
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 49
				// delete, line 49
				slice_del();
				break;
			case 2:
				// (, line 50
				// call R1, line 50
				if(!r_R1()){
					return false;
				}
				// not, line 50
				 {
					int v_1=limit-cursor;
					lab0:
					do{
						// (, line 50
						// literal, line 50
						if(!(eq_s_b("t"))){
							break lab0;
						}
						// call R1, line 50
						if(!r_R1()){
							break lab0;
						}
						return false;
					}while(false);
					cursor=limit-v_1;
				}
				// call C, line 50
				if(!r_C()){
					return false;
				}
				// delete, line 50
				slice_del();
				break;
			case 3:
				// (, line 51
				// call R1, line 51
				if(!r_R1()){
					return false;
				}
				// <-, line 51
				slice_from("ie");
				break;
			case 4:
				// (, line 53
				// or, line 53
				lab1:
				do{
					int v_2=limit-cursor;
					lab2:
					do{
						// (, line 53
						// literal, line 53
						if(!(eq_s_b("ar"))){
							break lab2;
						}
						// call R1, line 53
						if(!r_R1()){
							break lab2;
						}
						// call C, line 53
						if(!r_C()){
							break lab2;
						}
						// ], line 53
						bra=cursor;
						// delete, line 53
						slice_del();
						// call lengthen_V, line 53
						if(!r_lengthen_V()){
							break lab2;
						}
						break lab1;
					}while(false);
					cursor=limit-v_2;
					lab3:
					do{
						// (, line 54
						// literal, line 54
						if(!(eq_s_b("er"))){
							break lab3;
						}
						// call R1, line 54
						if(!r_R1()){
							break lab3;
						}
						// call C, line 54
						if(!r_C()){
							break lab3;
						}
						// ], line 54
						bra=cursor;
						// delete, line 54
						slice_del();
						break lab1;
					}while(false);
					cursor=limit-v_2;
					// (, line 55
					// call R1, line 55
					if(!r_R1()){
						return false;
					}
					// call C, line 55
					if(!r_C()){
						return false;
					}
					// <-, line 55
					slice_from("e");
				}while(false);
				break;
			case 5:
				// (, line 57
				// call R1, line 57
				if(!r_R1()){
					return false;
				}
				// call V, line 57
				if(!r_V()){
					return false;
				}
				// <-, line 57
				slice_from("au");
				break;
			case 6:
				// (, line 58
				// or, line 58
				lab4:
				do{
					int v_3=limit-cursor;
					lab5:
					do{
						// (, line 58
						// literal, line 58
						if(!(eq_s_b("hed"))){
							break lab5;
						}
						// call R1, line 58
						if(!r_R1()){
							break lab5;
						}
						// ], line 58
						bra=cursor;
						// <-, line 58
						slice_from("heid");
						break lab4;
					}while(false);
					cursor=limit-v_3;
					lab6:
					do{
						// (, line 59
						// literal, line 59
						if(!(eq_s_b("nd"))){
							break lab6;
						}
						// delete, line 59
						slice_del();
						break lab4;
					}while(false);
					cursor=limit-v_3;
					lab7:
					do{
						// (, line 60
						// literal, line 60
						if(!(eq_s_b("d"))){
							break lab7;
						}
						// call R1, line 60
						if(!r_R1()){
							break lab7;
						}
						// call C, line 60
						if(!r_C()){
							break lab7;
						}
						// ], line 60
						bra=cursor;
						// delete, line 60
						slice_del();
						break lab4;
					}while(false);
					cursor=limit-v_3;
					lab8:
					do{
						// (, line 61
						// or, line 61
						lab9:
						do{
							int v_4=limit-cursor;
							lab10:
							do{
								// literal, line 61
								if(!(eq_s_b("i"))){
									break lab10;
								}
								break lab9;
							}while(false);
							cursor=limit-v_4;
							// literal, line 61
							if(!(eq_s_b("j"))){
								break lab8;
							}
						}while(false);
						// call V, line 61
						if(!r_V()){
							break lab8;
						}
						// delete, line 61
						slice_del();
						break lab4;
					}while(false);
					cursor=limit-v_3;
					// (, line 62
					// call R1, line 62
					if(!r_R1()){
						return false;
					}
					// call C, line 62
					if(!r_C()){
						return false;
					}
					// delete, line 62
					slice_del();
					// call lengthen_V, line 62
					if(!r_lengthen_V()){
						return false;
					}
				}while(false);
				break;
			case 7:
				// (, line 63
				// <-, line 63
				slice_from("nd");
				break;
		}
		return true;
	}
	private boolean r_Step_2(){
		int among_var;
		// (, line 68
		// [, line 69
		ket=cursor;
		// among, line 69
		among_var=find_among_b(a_1);
		if(among_var==0){
			return false;
		}
		// (, line 69
		// ], line 69
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 70
				// or, line 70
				lab0:
				do{
					int v_1=limit-cursor;
					lab1:
					do{
						// (, line 70
						// literal, line 70
						if(!(eq_s_b("'t"))){
							break lab1;
						}
						// ], line 70
						bra=cursor;
						// delete, line 70
						slice_del();
						break lab0;
					}while(false);
					cursor=limit-v_1;
					lab2:
					do{
						// (, line 71
						// literal, line 71
						if(!(eq_s_b("et"))){
							break lab2;
						}
						// ], line 71
						bra=cursor;
						// call R1, line 71
						if(!r_R1()){
							break lab2;
						}
						// call C, line 71
						if(!r_C()){
							break lab2;
						}
						// delete, line 71
						slice_del();
						break lab0;
					}while(false);
					cursor=limit-v_1;
					lab3:
					do{
						// (, line 72
						// literal, line 72
						if(!(eq_s_b("rnt"))){
							break lab3;
						}
						// ], line 72
						bra=cursor;
						// <-, line 72
						slice_from("rn");
						break lab0;
					}while(false);
					cursor=limit-v_1;
					lab4:
					do{
						// (, line 73
						// literal, line 73
						if(!(eq_s_b("t"))){
							break lab4;
						}
						// ], line 73
						bra=cursor;
						// call R1, line 73
						if(!r_R1()){
							break lab4;
						}
						// call VX, line 73
						if(!r_VX()){
							break lab4;
						}
						// delete, line 73
						slice_del();
						break lab0;
					}while(false);
					cursor=limit-v_1;
					lab5:
					do{
						// (, line 74
						// literal, line 74
						if(!(eq_s_b("ink"))){
							break lab5;
						}
						// ], line 74
						bra=cursor;
						// <-, line 74
						slice_from("ing");
						break lab0;
					}while(false);
					cursor=limit-v_1;
					lab6:
					do{
						// (, line 75
						// literal, line 75
						if(!(eq_s_b("mp"))){
							break lab6;
						}
						// ], line 75
						bra=cursor;
						// <-, line 75
						slice_from("m");
						break lab0;
					}while(false);
					cursor=limit-v_1;
					lab7:
					do{
						// (, line 76
						// literal, line 76
						if(!(eq_s_b("'"))){
							break lab7;
						}
						// ], line 76
						bra=cursor;
						// call R1, line 76
						if(!r_R1()){
							break lab7;
						}
						// delete, line 76
						slice_del();
						break lab0;
					}while(false);
					cursor=limit-v_1;
					// (, line 77
					// ], line 77
					bra=cursor;
					// call R1, line 77
					if(!r_R1()){
						return false;
					}
					// call C, line 77
					if(!r_C()){
						return false;
					}
					// delete, line 77
					slice_del();
				}while(false);
				break;
			case 2:
				// (, line 78
				// call R1, line 78
				if(!r_R1()){
					return false;
				}
				// <-, line 78
				slice_from("g");
				break;
			case 3:
				// (, line 79
				// call R1, line 79
				if(!r_R1()){
					return false;
				}
				// <-, line 79
				slice_from("lijk");
				break;
			case 4:
				// (, line 80
				// call R1, line 80
				if(!r_R1()){
					return false;
				}
				// <-, line 80
				slice_from("isch");
				break;
			case 5:
				// (, line 81
				// call R1, line 81
				if(!r_R1()){
					return false;
				}
				// call C, line 81
				if(!r_C()){
					return false;
				}
				// delete, line 81
				slice_del();
				break;
			case 6:
				// (, line 82
				// call R1, line 82
				if(!r_R1()){
					return false;
				}
				// <-, line 82
				slice_from("t");
				break;
			case 7:
				// (, line 83
				// call R1, line 83
				if(!r_R1()){
					return false;
				}
				// <-, line 83
				slice_from("s");
				break;
			case 8:
				// (, line 84
				// call R1, line 84
				if(!r_R1()){
					return false;
				}
				// <-, line 84
				slice_from("r");
				break;
			case 9:
				// (, line 85
				// call R1, line 85
				if(!r_R1()){
					return false;
				}
				// delete, line 85
				slice_del();
				// attach, line 85
				insert(cursor,cursor,"l");
				// call lengthen_V, line 85
				if(!r_lengthen_V()){
					return false;
				}
				break;
			case 10:
				// (, line 86
				// call R1, line 86
				if(!r_R1()){
					return false;
				}
				// call C, line 86
				if(!r_C()){
					return false;
				}
				// delete, line 86
				slice_del();
				// attach, line 86
				insert(cursor,cursor,"en");
				// call lengthen_V, line 86
				if(!r_lengthen_V()){
					return false;
				}
				break;
			case 11:
				// (, line 87
				// call R1, line 87
				if(!r_R1()){
					return false;
				}
				// call C, line 87
				if(!r_C()){
					return false;
				}
				// <-, line 87
				slice_from("ief");
				break;
		}
		return true;
	}
	private boolean r_Step_3(){
		int among_var;
		// (, line 92
		// [, line 93
		ket=cursor;
		// among, line 93
		among_var=find_among_b(a_2);
		if(among_var==0){
			return false;
		}
		// (, line 93
		// ], line 93
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 94
				// call R1, line 94
				if(!r_R1()){
					return false;
				}
				// <-, line 94
				slice_from("eer");
				break;
			case 2:
				// (, line 95
				// call R1, line 95
				if(!r_R1()){
					return false;
				}
				// delete, line 95
				slice_del();
				// call lengthen_V, line 95
				if(!r_lengthen_V()){
					return false;
				}
				break;
			case 3:
				// (, line 98
				// call R1, line 98
				if(!r_R1()){
					return false;
				}
				// delete, line 98
				slice_del();
				break;
			case 4:
				// (, line 99
				// <-, line 99
				slice_from("r");
				break;
			case 5:
				// (, line 103
				// call R1, line 103
				if(!r_R1()){
					return false;
				}
				// call C, line 103
				if(!r_C()){
					return false;
				}
				// <-, line 103
				slice_from("aar");
				break;
			case 6:
				// (, line 104
				// call R2, line 104
				if(!r_R2()){
					return false;
				}
				// delete, line 104
				slice_del();
				// attach, line 104
				insert(cursor,cursor,"f");
				// call lengthen_V, line 104
				if(!r_lengthen_V()){
					return false;
				}
				break;
			case 7:
				// (, line 105
				// call R2, line 105
				if(!r_R2()){
					return false;
				}
				// delete, line 105
				slice_del();
				// attach, line 105
				insert(cursor,cursor,"g");
				// call lengthen_V, line 105
				if(!r_lengthen_V()){
					return false;
				}
				break;
			case 8:
				// (, line 106
				// call R1, line 106
				if(!r_R1()){
					return false;
				}
				// call C, line 106
				if(!r_C()){
					return false;
				}
				// <-, line 106
				slice_from("t");
				break;
			case 9:
				// (, line 107
				// call R1, line 107
				if(!r_R1()){
					return false;
				}
				// call C, line 107
				if(!r_C()){
					return false;
				}
				// <-, line 107
				slice_from("d");
				break;
		}
		return true;
	}
	private boolean r_Step_4(){
		int among_var;
		// (, line 112
		// or, line 132
		lab0:
		do{
			int v_1=limit-cursor;
			lab1:
			do{
				// (, line 113
				// [, line 113
				ket=cursor;
				// among, line 113
				among_var=find_among_b(a_3);
				if(among_var==0){
					break lab1;
				}
				// (, line 113
				// ], line 113
				bra=cursor;
				switch(among_var){
					case 0:
						break lab1;
					case 1:
						// (, line 114
						// call R1, line 114
						if(!r_R1()){
							break lab1;
						}
						// <-, line 114
						slice_from("ie");
						break;
					case 2:
						// (, line 115
						// call R1, line 115
						if(!r_R1()){
							break lab1;
						}
						// <-, line 115
						slice_from("eer");
						break;
					case 3:
						// (, line 116
						// call R1, line 116
						if(!r_R1()){
							break lab1;
						}
						// delete, line 116
						slice_del();
						break;
					case 4:
						// (, line 117
						// call R1, line 117
						if(!r_R1()){
							break lab1;
						}
						// call V, line 117
						if(!r_V()){
							break lab1;
						}
						// <-, line 117
						slice_from("n");
						break;
					case 5:
						// (, line 118
						// call R1, line 118
						if(!r_R1()){
							break lab1;
						}
						// call V, line 118
						if(!r_V()){
							break lab1;
						}
						// <-, line 118
						slice_from("l");
						break;
					case 6:
						// (, line 119
						// call R1, line 119
						if(!r_R1()){
							break lab1;
						}
						// call V, line 119
						if(!r_V()){
							break lab1;
						}
						// <-, line 119
						slice_from("r");
						break;
					case 7:
						// (, line 120
						// call R1, line 120
						if(!r_R1()){
							break lab1;
						}
						// <-, line 120
						slice_from("teer");
						break;
					case 8:
						// (, line 122
						// call R1, line 122
						if(!r_R1()){
							break lab1;
						}
						// <-, line 122
						slice_from("lijk");
						break;
					case 9:
						// (, line 129
						// call R1, line 129
						if(!r_R1()){
							break lab1;
						}
						// call C, line 129
						if(!r_C()){
							break lab1;
						}
						// delete, line 129
						slice_del();
						// call lengthen_V, line 129
						if(!r_lengthen_V()){
							break lab1;
						}
						break;
				}
				break lab0;
			}while(false);
			cursor=limit-v_1;
			// (, line 133
			// [, line 133
			ket=cursor;
			// among, line 133
			among_var=find_among_b(a_4);
			if(among_var==0){
				return false;
			}
			// (, line 133
			// ], line 133
			bra=cursor;
			switch(among_var){
				case 0:
					return false;
				case 1:
					// (, line 136
					// call R1, line 136
					if(!r_R1()){
						return false;
					}
					// call C, line 136
					if(!r_C()){
						return false;
					}
					// delete, line 136
					slice_del();
					// call lengthen_V, line 136
					if(!r_lengthen_V()){
						return false;
					}
					break;
			}
		}while(false);
		return true;
	}
	private boolean r_Step_7(){
		int among_var;
		// (, line 142
		// [, line 143
		ket=cursor;
		// among, line 143
		among_var=find_among_b(a_5);
		if(among_var==0){
			return false;
		}
		// (, line 143
		// ], line 143
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 144
				// <-, line 144
				slice_from("k");
				break;
			case 2:
				// (, line 145
				// <-, line 145
				slice_from("f");
				break;
			case 3:
				// (, line 146
				// <-, line 146
				slice_from("p");
				break;
		}
		return true;
	}
	private boolean r_Step_6(){
		int among_var;
		// (, line 151
		// [, line 152
		ket=cursor;
		// among, line 152
		among_var=find_among_b(a_6);
		if(among_var==0){
			return false;
		}
		// (, line 152
		// ], line 152
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 153
				// <-, line 153
				slice_from("b");
				break;
			case 2:
				// (, line 154
				// <-, line 154
				slice_from("c");
				break;
			case 3:
				// (, line 155
				// <-, line 155
				slice_from("d");
				break;
			case 4:
				// (, line 156
				// <-, line 156
				slice_from("f");
				break;
			case 5:
				// (, line 157
				// <-, line 157
				slice_from("g");
				break;
			case 6:
				// (, line 158
				// <-, line 158
				slice_from("h");
				break;
			case 7:
				// (, line 159
				// <-, line 159
				slice_from("j");
				break;
			case 8:
				// (, line 160
				// <-, line 160
				slice_from("k");
				break;
			case 9:
				// (, line 161
				// <-, line 161
				slice_from("l");
				break;
			case 10:
				// (, line 162
				// <-, line 162
				slice_from("m");
				break;
			case 11:
				// (, line 163
				// <-, line 163
				slice_from("n");
				break;
			case 12:
				// (, line 164
				// <-, line 164
				slice_from("p");
				break;
			case 13:
				// (, line 165
				// <-, line 165
				slice_from("q");
				break;
			case 14:
				// (, line 166
				// <-, line 166
				slice_from("r");
				break;
			case 15:
				// (, line 167
				// <-, line 167
				slice_from("s");
				break;
			case 16:
				// (, line 168
				// <-, line 168
				slice_from("t");
				break;
			case 17:
				// (, line 169
				// <-, line 169
				slice_from("v");
				break;
			case 18:
				// (, line 170
				// <-, line 170
				slice_from("w");
				break;
			case 19:
				// (, line 171
				// <-, line 171
				slice_from("x");
				break;
			case 20:
				// (, line 172
				// <-, line 172
				slice_from("z");
				break;
		}
		return true;
	}
	private boolean r_Step_1c(){
		int among_var;
		// (, line 179
		// [, line 180
		ket=cursor;
		// among, line 180
		among_var=find_among_b(a_7);
		if(among_var==0){
			return false;
		}
		// (, line 180
		// ], line 180
		bra=cursor;
		// call R1, line 180
		if(!r_R1()){
			return false;
		}
		// call C, line 180
		if(!r_C()){
			return false;
		}
		switch(among_var){
			case 0:
				return false;
			case 1: // (, line 181
			// not, line 181
			{
				int v_1=limit-cursor;
				lab0:
				do{
					// (, line 181
					// literal, line 181
					if(!(eq_s_b("n"))){
						break lab0;
					}
					// call R1, line 181
					if(!r_R1()){
						break lab0;
					}
					return false;
				}while(false);
				cursor=limit-v_1;
			}
			// delete, line 181
			slice_del();
			break;
			case 2: // (, line 182
			// not, line 182
			{
				int v_2=limit-cursor;
				lab1:
				do{
					// (, line 182
					// literal, line 182
					if(!(eq_s_b("h"))){
						break lab1;
					}
					// call R1, line 182
					if(!r_R1()){
						break lab1;
					}
					return false;
				}while(false);
				cursor=limit-v_2;
			}
			// delete, line 182
			slice_del();
			break;
		}
		return true;
	}
	private boolean r_Lose_prefix(){
		// (, line 187
		// [, line 188
		bra=cursor;
		// literal, line 188
		if(!(eq_s("ge"))){
			return false;
		}
		// ], line 188
		ket=cursor;
		// test, line 188
		int v_1=cursor;
		// hop, line 188
		{
			int c=cursor+3;
			if(0>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=v_1;
		// (, line 188
		// goto, line 188
		golab0:
		while(true){
			int v_2=cursor;
			lab1:
			do{
				if(!(in_grouping(g_v,97,121))){
					break lab1;
				}
				cursor=v_2;
				break golab0;
			}while(false);
			cursor=v_2;
			if(cursor>=limit){
				return false;
			}
			cursor++;
		}
		// goto, line 188
		golab2:
		while(true){
			int v_3=cursor;
			lab3:
			do{
				if(!(out_grouping(g_v,97,121))){
					break lab3;
				}
				cursor=v_3;
				break golab2;
			}while(false);
			cursor=v_3;
			if(cursor>=limit){
				return false;
			}
			cursor++;
		}
		// set GE_removed, line 189
		B_GE_removed=true;
		// delete, line 190
		slice_del();
		return true;
	}
	private boolean r_Lose_infix(){
		// (, line 193
		// next, line 194
		if(cursor>=limit){
			return false;
		}
		cursor++;
		// gopast, line 195
		golab0:
		while(true){
			lab1:
			do{
				// (, line 195
				// [, line 195
				bra=cursor;
				// literal, line 195
				if(!(eq_s("ge"))){
					break lab1;
				}
				// ], line 195
				ket=cursor;
				break golab0;
			}while(false);
			if(cursor>=limit){
				return false;
			}
			cursor++;
		}
		// test, line 195
		int v_2=cursor;
		// hop, line 195
		{
			int c=cursor+3;
			if(0>c||c>limit){
				return false;
			}
			cursor=c;
		}
		cursor=v_2;
		// (, line 195
		// goto, line 195
		golab2:
		while(true){
			int v_3=cursor;
			lab3:
			do{
				if(!(in_grouping(g_v,97,121))){
					break lab3;
				}
				cursor=v_3;
				break golab2;
			}while(false);
			cursor=v_3;
			if(cursor>=limit){
				return false;
			}
			cursor++;
		}
		// goto, line 195
		golab4:
		while(true){
			int v_4=cursor;
			lab5:
			do{
				if(!(out_grouping(g_v,97,121))){
					break lab5;
				}
				cursor=v_4;
				break golab4;
			}while(false);
			cursor=v_4;
			if(cursor>=limit){
				return false;
			}
			cursor++;
		}
		// set GE_removed, line 196
		B_GE_removed=true;
		// delete, line 197
		slice_del();
		return true;
	}
	private boolean r_measure(){
		// (, line 200
		// do, line 201
		int v_1=cursor;
		lab0:
		do{
			// (, line 201
			// tolimit, line 202
			cursor=limit;
			// setmark p1, line 203
			I_p1=cursor;
			// setmark p2, line 204
			I_p2=cursor;
		}while(false);
		cursor=v_1;
		// do, line 206
		int v_2=cursor;
		lab1:
		do{
			// (, line 206
			// repeat, line 207
			replab2:
			while(true){
				lab3:
				do{
					if(!(out_grouping(g_v,97,121))){
						break lab3;
					}
					continue replab2;
				}while(false);
				break replab2;
			}
			// atleast, line 207
			{
				int v_4=1;
				// atleast, line 207
				replab4:
				while(true){
					int v_5=cursor;
					lab5:
					do{
						// (, line 207
						// or, line 207
						lab6:
						do{
							int v_6=cursor;
							lab7:
							do{
								// literal, line 207
								if(!(eq_s("ij"))){
									break lab7;
								}
								break lab6;
							}while(false);
							cursor=v_6;
							if(!(in_grouping(g_v,97,121))){
								break lab5;
							}
						}while(false);
						v_4--;
						continue replab4;
					}while(false);
					cursor=v_5;
					break replab4;
				}
				if(v_4>0){
					break lab1;
				}
			}
			if(!(out_grouping(g_v,97,121))){
				break lab1;
			}
			// setmark p1, line 207
			I_p1=cursor;
			// repeat, line 208
			replab8:
			while(true){
				lab9:
				do{
					if(!(out_grouping(g_v,97,121))){
						break lab9;
					}
					continue replab8;
				}while(false);
				break replab8;
			}
			// atleast, line 208
			{
				int v_8=1;
				// atleast, line 208
				replab10:
				while(true){
					int v_9=cursor;
					lab11:
					do{
						// (, line 208
						// or, line 208
						lab12:
						do{
							int v_10=cursor;
							lab13:
							do{
								// literal, line 208
								if(!(eq_s("ij"))){
									break lab13;
								}
								break lab12;
							}while(false);
							cursor=v_10;
							if(!(in_grouping(g_v,97,121))){
								break lab11;
							}
						}while(false);
						v_8--;
						continue replab10;
					}while(false);
					cursor=v_9;
					break replab10;
				}
				if(v_8>0){
					break lab1;
				}
			}
			if(!(out_grouping(g_v,97,121))){
				break lab1;
			}
			// setmark p2, line 208
			I_p2=cursor;
		}while(false);
		cursor=v_2;
		return true;
	}
	public boolean stem(){
		// (, line 212
		// unset Y_found, line 214
		B_Y_found=false;
		// unset stemmed, line 215
		B_stemmed=false;
		// do, line 216
		int v_1=cursor;
		lab0:
		do{
			// (, line 216
			// [, line 216
			bra=cursor;
			// literal, line 216
			if(!(eq_s("y"))){
				break lab0;
			}
			// ], line 216
			ket=cursor;
			// <-, line 216
			slice_from("Y");
			// set Y_found, line 216
			B_Y_found=true;
		}while(false);
		cursor=v_1;
		// do, line 217
		int v_2=cursor;
		lab1:
		do{
			// repeat, line 217
			replab2:
			while(true){
				int v_3=cursor;
				lab3:
				do{
					// (, line 217
					// goto, line 217
					golab4:
					while(true){
						int v_4=cursor;
						lab5:
						do{
							// (, line 217
							if(!(in_grouping(g_v,97,121))){
								break lab5;
							}
							// [, line 217
							bra=cursor;
							// literal, line 217
							if(!(eq_s("y"))){
								break lab5;
							}
							// ], line 217
							ket=cursor;
							cursor=v_4;
							break golab4;
						}while(false);
						cursor=v_4;
						if(cursor>=limit){
							break lab3;
						}
						cursor++;
					}
					// <-, line 217
					slice_from("Y");
					// set Y_found, line 217
					B_Y_found=true;
					continue replab2;
				}while(false);
				cursor=v_3;
				break replab2;
			}
		}while(false);
		cursor=v_2;
		// call measure, line 219
		if(!r_measure()){
			return false;
		}
		// backwards, line 221
		limit_backward=cursor;
		cursor=limit;
		// (, line 221
		// do, line 222
		int v_5=limit-cursor;
		lab6:
		do{
			// (, line 222
			// call Step_1, line 222
			if(!r_Step_1()){
				break lab6;
			}
			// set stemmed, line 222
			B_stemmed=true;
		}while(false);
		cursor=limit-v_5;
		// do, line 223
		int v_6=limit-cursor;
		lab7:
		do{
			// (, line 223
			// call Step_2, line 223
			if(!r_Step_2()){
				break lab7;
			}
			// set stemmed, line 223
			B_stemmed=true;
		}while(false);
		cursor=limit-v_6;
		// do, line 224
		int v_7=limit-cursor;
		lab8:
		do{
			// (, line 224
			// call Step_3, line 224
			if(!r_Step_3()){
				break lab8;
			}
			// set stemmed, line 224
			B_stemmed=true;
		}while(false);
		cursor=limit-v_7;
		// do, line 225
		int v_8=limit-cursor;
		lab9:
		do{
			// (, line 225
			// call Step_4, line 225
			if(!r_Step_4()){
				break lab9;
			}
			// set stemmed, line 225
			B_stemmed=true;
		}while(false);
		cursor=limit-v_8;
		cursor=limit_backward;
		// unset GE_removed, line 227
		B_GE_removed=false;
		// do, line 228
		int v_9=cursor;
		lab10:
		do{
			// (, line 228
			// and, line 228
			int v_10=cursor;
			// call Lose_prefix, line 228
			if(!r_Lose_prefix()){
				break lab10;
			}
			cursor=v_10;
			// call measure, line 228
			if(!r_measure()){
				break lab10;
			}
		}while(false);
		cursor=v_9;
		// backwards, line 229
		limit_backward=cursor;
		cursor=limit;
		// (, line 229
		// do, line 230
		int v_11=limit-cursor;
		lab11:
		do{
			// (, line 230
			// Boolean test GE_removed, line 230
			if(!(B_GE_removed)){
				break lab11;
			}
			// call Step_1c, line 230
			if(!r_Step_1c()){
				break lab11;
			}
		}while(false);
		cursor=limit-v_11;
		cursor=limit_backward;
		// unset GE_removed, line 232
		B_GE_removed=false;
		// do, line 233
		int v_12=cursor;
		lab12:
		do{
			// (, line 233
			// and, line 233
			int v_13=cursor;
			// call Lose_infix, line 233
			if(!r_Lose_infix()){
				break lab12;
			}
			cursor=v_13;
			// call measure, line 233
			if(!r_measure()){
				break lab12;
			}
		}while(false);
		cursor=v_12;
		// backwards, line 234
		limit_backward=cursor;
		cursor=limit;
		// (, line 234
		// do, line 235
		int v_14=limit-cursor;
		lab13:
		do{
			// (, line 235
			// Boolean test GE_removed, line 235
			if(!(B_GE_removed)){
				break lab13;
			}
			// call Step_1c, line 235
			if(!r_Step_1c()){
				break lab13;
			}
		}while(false);
		cursor=limit-v_14;
		cursor=limit_backward;
		// backwards, line 237
		limit_backward=cursor;
		cursor=limit;
		// (, line 237
		// do, line 238
		int v_15=limit-cursor;
		lab14:
		do{
			// (, line 238
			// call Step_7, line 238
			if(!r_Step_7()){
				break lab14;
			}
			// set stemmed, line 238
			B_stemmed=true;
		}while(false);
		cursor=limit-v_15;
		// do, line 239
		int v_16=limit-cursor;
		lab15:
		do{
			// (, line 239
			// or, line 239
			lab16:
			do{
				lab17:
				do{
					// Boolean test stemmed, line 239
					if(!(B_stemmed)){
						break lab17;
					}
					break lab16;
				}while(false);
				// Boolean test GE_removed, line 239
				if(!(B_GE_removed)){
					break lab15;
				}
			}while(false);
			// call Step_6, line 239
			if(!r_Step_6()){
				break lab15;
			}
		}while(false);
		cursor=limit-v_16;
		cursor=limit_backward;
		// do, line 241
		int v_18=cursor;
		lab18:
		do{
			// (, line 241
			// Boolean test Y_found, line 241
			if(!(B_Y_found)){
				break lab18;
			}
			// repeat, line 241
			replab19:
			while(true){
				int v_19=cursor;
				lab20:
				do{
					// (, line 241
					// goto, line 241
					golab21:
					while(true){
						int v_20=cursor;
						lab22:
						do{
							// (, line 241
							// [, line 241
							bra=cursor;
							// literal, line 241
							if(!(eq_s("Y"))){
								break lab22;
							}
							// ], line 241
							ket=cursor;
							cursor=v_20;
							break golab21;
						}while(false);
						cursor=v_20;
						if(cursor>=limit){
							break lab20;
						}
						cursor++;
					}
					// <-, line 241
					slice_from("y");
					continue replab19;
				}while(false);
				cursor=v_19;
				break replab19;
			}
		}while(false);
		cursor=v_18;
		return true;
	}
	public boolean equals(Object o){
		return o instanceof KraaijPohlmannStemmer;
	}
	public int hashCode(){
		return KraaijPohlmannStemmer.class.getName().hashCode();
	}
}
