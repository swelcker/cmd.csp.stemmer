
// http://snowballstem.org/
package cspstemmer;

/**
 * This class was automatically generated by a Snowball to Java compiler It
 * implements the stemming algorithm defined by a snowball script.
 */
public class RussianStemmer extends SnowballStemmer{
	private static final long serialVersionUID=1L;
	private final static Among a_0[]={
		new Among("\u00D0\u00B2\u00D1\u0088\u00D0\u00B8\u00D1\u0081\u00D1\u008C",-1,1),
		new Among("\u00D1\u008B\u00D0\u00B2\u00D1\u0088\u00D0\u00B8\u00D1\u0081\u00D1\u008C",0,2),
		new Among("\u00D0\u00B8\u00D0\u00B2\u00D1\u0088\u00D0\u00B8\u00D1\u0081\u00D1\u008C",0,2),
		new Among("\u00D0\u00B2",-1,1),
		new Among("\u00D1\u008B\u00D0\u00B2",3,2),
		new Among("\u00D0\u00B8\u00D0\u00B2",3,2),
		new Among("\u00D0\u00B2\u00D1\u0088\u00D0\u00B8",-1,1),
		new Among("\u00D1\u008B\u00D0\u00B2\u00D1\u0088\u00D0\u00B8",6,2),
		new Among("\u00D0\u00B8\u00D0\u00B2\u00D1\u0088\u00D0\u00B8",6,2)
	};
	private final static Among a_1[]={
		new Among("\u00D0\u00B5\u00D0\u00BC\u00D1\u0083",-1,1),
		new Among("\u00D0\u00BE\u00D0\u00BC\u00D1\u0083",-1,1),
		new Among("\u00D1\u008B\u00D1\u0085",-1,1),
		new Among("\u00D0\u00B8\u00D1\u0085",-1,1),
		new Among("\u00D1\u0083\u00D1\u008E",-1,1),
		new Among("\u00D1\u008E\u00D1\u008E",-1,1),
		new Among("\u00D0\u00B5\u00D1\u008E",-1,1),
		new Among("\u00D0\u00BE\u00D1\u008E",-1,1),
		new Among("\u00D1\u008F\u00D1\u008F",-1,1),
		new Among("\u00D0\u00B0\u00D1\u008F",-1,1),
		new Among("\u00D1\u008B\u00D0\u00B5",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00B5",-1,1),
		new Among("\u00D0\u00B8\u00D0\u00B5",-1,1),
		new Among("\u00D0\u00BE\u00D0\u00B5",-1,1),
		new Among("\u00D1\u008B\u00D0\u00BC\u00D0\u00B8",-1,1),
		new Among("\u00D0\u00B8\u00D0\u00BC\u00D0\u00B8",-1,1),
		new Among("\u00D1\u008B\u00D0\u00B9",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00B9",-1,1),
		new Among("\u00D0\u00B8\u00D0\u00B9",-1,1),
		new Among("\u00D0\u00BE\u00D0\u00B9",-1,1),
		new Among("\u00D1\u008B\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B8\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00BE\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00B3\u00D0\u00BE",-1,1),
		new Among("\u00D0\u00BE\u00D0\u00B3\u00D0\u00BE",-1,1)
	};
	private final static Among a_2[]={
		new Among("\u00D0\u00B2\u00D1\u0088",-1,1),
		new Among("\u00D1\u008B\u00D0\u00B2\u00D1\u0088",0,2),
		new Among("\u00D0\u00B8\u00D0\u00B2\u00D1\u0088",0,2),
		new Among("\u00D1\u0089",-1,1),
		new Among("\u00D1\u008E\u00D1\u0089",3,1),
		new Among("\u00D1\u0083\u00D1\u008E\u00D1\u0089",4,2),
		new Among("\u00D0\u00B5\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00BD\u00D0\u00BD",-1,1)
	};
	private final static Among a_3[]={
		new Among("\u00D1\u0081\u00D1\u008C",-1,1),
		new Among("\u00D1\u0081\u00D1\u008F",-1,1)
	};
	private final static Among a_4[]={
		new Among("\u00D1\u008B\u00D1\u0082",-1,2),
		new Among("\u00D1\u008E\u00D1\u0082",-1,1),
		new Among("\u00D1\u0083\u00D1\u008E\u00D1\u0082",1,2),
		new Among("\u00D1\u008F\u00D1\u0082",-1,2),
		new Among("\u00D0\u00B5\u00D1\u0082",-1,1),
		new Among("\u00D1\u0083\u00D0\u00B5\u00D1\u0082",4,2),
		new Among("\u00D0\u00B8\u00D1\u0082",-1,2),
		new Among("\u00D0\u00BD\u00D1\u008B",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00BD\u00D1\u008B",7,2),
		new Among("\u00D1\u0082\u00D1\u008C",-1,1),
		new Among("\u00D1\u008B\u00D1\u0082\u00D1\u008C",9,2),
		new Among("\u00D0\u00B8\u00D1\u0082\u00D1\u008C",9,2),
		new Among("\u00D0\u00B5\u00D1\u0088\u00D1\u008C",-1,1),
		new Among("\u00D0\u00B8\u00D1\u0088\u00D1\u008C",-1,2),
		new Among("\u00D1\u008E",-1,2),
		new Among("\u00D1\u0083\u00D1\u008E",14,2),
		new Among("\u00D0\u00BB\u00D0\u00B0",-1,1),
		new Among("\u00D1\u008B\u00D0\u00BB\u00D0\u00B0",16,2),
		new Among("\u00D0\u00B8\u00D0\u00BB\u00D0\u00B0",16,2),
		new Among("\u00D0\u00BD\u00D0\u00B0",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00BD\u00D0\u00B0",19,2),
		new Among("\u00D0\u00B5\u00D1\u0082\u00D0\u00B5",-1,1),
		new Among("\u00D0\u00B8\u00D1\u0082\u00D0\u00B5",-1,2),
		new Among("\u00D0\u00B9\u00D1\u0082\u00D0\u00B5",-1,1),
		new Among("\u00D1\u0083\u00D0\u00B9\u00D1\u0082\u00D0\u00B5",23,2),
		new Among("\u00D0\u00B5\u00D0\u00B9\u00D1\u0082\u00D0\u00B5",23,2),
		new Among("\u00D0\u00BB\u00D0\u00B8",-1,1),
		new Among("\u00D1\u008B\u00D0\u00BB\u00D0\u00B8",26,2),
		new Among("\u00D0\u00B8\u00D0\u00BB\u00D0\u00B8",26,2),
		new Among("\u00D0\u00B9",-1,1),
		new Among("\u00D1\u0083\u00D0\u00B9",29,2),
		new Among("\u00D0\u00B5\u00D0\u00B9",29,2),
		new Among("\u00D0\u00BB",-1,1),
		new Among("\u00D1\u008B\u00D0\u00BB",32,2),
		new Among("\u00D0\u00B8\u00D0\u00BB",32,2),
		new Among("\u00D1\u008B\u00D0\u00BC",-1,2),
		new Among("\u00D0\u00B5\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B8\u00D0\u00BC",-1,2),
		new Among("\u00D0\u00BD",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00BD",38,2),
		new Among("\u00D0\u00BB\u00D0\u00BE",-1,1),
		new Among("\u00D1\u008B\u00D0\u00BB\u00D0\u00BE",40,2),
		new Among("\u00D0\u00B8\u00D0\u00BB\u00D0\u00BE",40,2),
		new Among("\u00D0\u00BD\u00D0\u00BE",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00BD\u00D0\u00BE",43,2),
		new Among("\u00D0\u00BD\u00D0\u00BD\u00D0\u00BE",43,1)
	};
	private final static Among a_5[]={
		new Among("\u00D1\u0083",-1,1),
		new Among("\u00D1\u008F\u00D1\u0085",-1,1),
		new Among("\u00D0\u00B8\u00D1\u008F\u00D1\u0085",1,1),
		new Among("\u00D0\u00B0\u00D1\u0085",-1,1),
		new Among("\u00D1\u008B",-1,1),
		new Among("\u00D1\u008C",-1,1),
		new Among("\u00D1\u008E",-1,1),
		new Among("\u00D1\u008C\u00D1\u008E",6,1),
		new Among("\u00D0\u00B8\u00D1\u008E",6,1),
		new Among("\u00D1\u008F",-1,1),
		new Among("\u00D1\u008C\u00D1\u008F",9,1),
		new Among("\u00D0\u00B8\u00D1\u008F",9,1),
		new Among("\u00D0\u00B0",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00B2",-1,1),
		new Among("\u00D0\u00BE\u00D0\u00B2",-1,1),
		new Among("\u00D0\u00B5",-1,1),
		new Among("\u00D1\u008C\u00D0\u00B5",15,1),
		new Among("\u00D0\u00B8\u00D0\u00B5",15,1),
		new Among("\u00D0\u00B8",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00B8",18,1),
		new Among("\u00D0\u00B8\u00D0\u00B8",18,1),
		new Among("\u00D1\u008F\u00D0\u00BC\u00D0\u00B8",18,1),
		new Among("\u00D0\u00B8\u00D1\u008F\u00D0\u00BC\u00D0\u00B8",21,1),
		new Among("\u00D0\u00B0\u00D0\u00BC\u00D0\u00B8",18,1),
		new Among("\u00D0\u00B9",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00B9",24,1),
		new Among("\u00D0\u00B8\u00D0\u00B5\u00D0\u00B9",25,1),
		new Among("\u00D0\u00B8\u00D0\u00B9",24,1),
		new Among("\u00D0\u00BE\u00D0\u00B9",24,1),
		new Among("\u00D1\u008F\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B8\u00D1\u008F\u00D0\u00BC",29,1),
		new Among("\u00D0\u00B0\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B5\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00B8\u00D0\u00B5\u00D0\u00BC",32,1),
		new Among("\u00D0\u00BE\u00D0\u00BC",-1,1),
		new Among("\u00D0\u00BE",-1,1)
	};
	private final static Among a_6[]={
		new Among("\u00D0\u00BE\u00D1\u0081\u00D1\u0082",-1,1),
		new Among("\u00D0\u00BE\u00D1\u0081\u00D1\u0082\u00D1\u008C",-1,1)
	};
	private final static Among a_7[]={
		new Among("\u00D0\u00B5\u00D0\u00B9\u00D1\u0088",-1,1),
		new Among("\u00D1\u008C",-1,3),
		new Among("\u00D0\u00B5\u00D0\u00B9\u00D1\u0088\u00D0\u00B5",-1,1),
		new Among("\u00D0\u00BD",-1,2)
	};
	private static final char g_v[]={33,65,8,232};
	private int I_p2;
	private int I_pV;
	private boolean r_mark_regions(){
		// (, line 59
		I_pV=limit;
		I_p2=limit;
		// do, line 63
		int v_1=cursor;
		lab0:
		do{
			// (, line 63
			// gopast, line 64
			golab1:
			while(true){
				lab2:
				do{
					if(!(in_grouping(g_v,1072,1103))){
						break lab2;
					}
					break golab1;
				}while(false);
				if(cursor>=limit){
					break lab0;
				}
				cursor++;
			}
			// setmark pV, line 64
			I_pV=cursor;
			// gopast, line 64
			golab3:
			while(true){
				lab4:
				do{
					if(!(out_grouping(g_v,1072,1103))){
						break lab4;
					}
					break golab3;
				}while(false);
				if(cursor>=limit){
					break lab0;
				}
				cursor++;
			}
			// gopast, line 65
			golab5:
			while(true){
				lab6:
				do{
					if(!(in_grouping(g_v,1072,1103))){
						break lab6;
					}
					break golab5;
				}while(false);
				if(cursor>=limit){
					break lab0;
				}
				cursor++;
			}
			// gopast, line 65
			golab7:
			while(true){
				lab8:
				do{
					if(!(out_grouping(g_v,1072,1103))){
						break lab8;
					}
					break golab7;
				}while(false);
				if(cursor>=limit){
					break lab0;
				}
				cursor++;
			}
			// setmark p2, line 65
			I_p2=cursor;
		}while(false);
		cursor=v_1;
		return true;
	}
	private boolean r_R2(){
		if(!(I_p2<=cursor)){
			return false;
		}
		return true;
	}
	private boolean r_perfective_gerund(){
		int among_var;
		// (, line 73
		// [, line 74
		ket=cursor;
		// substring, line 74
		among_var=find_among_b(a_0);
		if(among_var==0){
			return false;
		}
		// ], line 74
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 78
				// or, line 78
				lab0:
				do{
					int v_1=limit-cursor;
					lab1:
					do{
						// literal, line 78
						if(!(eq_s_b("\u00D0\u00B0"))){
							break lab1;
						}
						break lab0;
					}while(false);
					cursor=limit-v_1;
					// literal, line 78
					if(!(eq_s_b("\u00D1\u008F"))){
						return false;
					}
				}while(false);
				// delete, line 78
				slice_del();
				break;
			case 2:
				// (, line 85
				// delete, line 85
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_adjective(){
		int among_var;
		// (, line 89
		// [, line 90
		ket=cursor;
		// substring, line 90
		among_var=find_among_b(a_1);
		if(among_var==0){
			return false;
		}
		// ], line 90
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 99
				// delete, line 99
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_adjectival(){
		int among_var;
		// (, line 103
		// call adjective, line 104
		if(!r_adjective()){
			return false;
		}
		// try, line 111
		int v_1=limit-cursor;
		lab0:
		do{
			// (, line 111
			// [, line 112
			ket=cursor;
			// substring, line 112
			among_var=find_among_b(a_2);
			if(among_var==0){
				cursor=limit-v_1;
				break lab0;
			}
			// ], line 112
			bra=cursor;
			switch(among_var){
				case 0:
					cursor=limit-v_1;
					break lab0;
				case 1:
					// (, line 117
					// or, line 117
					lab1:
					do{
						int v_2=limit-cursor;
						lab2:
						do{
							// literal, line 117
							if(!(eq_s_b("\u00D0\u00B0"))){
								break lab2;
							}
							break lab1;
						}while(false);
						cursor=limit-v_2;
						// literal, line 117
						if(!(eq_s_b("\u00D1\u008F"))){
							cursor=limit-v_1;
							break lab0;
						}
					}while(false);
					// delete, line 117
					slice_del();
					break;
				case 2:
					// (, line 124
					// delete, line 124
					slice_del();
					break;
			}
		}while(false);
		return true;
	}
	private boolean r_reflexive(){
		int among_var;
		// (, line 130
		// [, line 131
		ket=cursor;
		// substring, line 131
		among_var=find_among_b(a_3);
		if(among_var==0){
			return false;
		}
		// ], line 131
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 134
				// delete, line 134
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_verb(){
		int among_var;
		// (, line 138
		// [, line 139
		ket=cursor;
		// substring, line 139
		among_var=find_among_b(a_4);
		if(among_var==0){
			return false;
		}
		// ], line 139
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 145
				// or, line 145
				lab0:
				do{
					int v_1=limit-cursor;
					lab1:
					do{
						// literal, line 145
						if(!(eq_s_b("\u00D0\u00B0"))){
							break lab1;
						}
						break lab0;
					}while(false);
					cursor=limit-v_1;
					// literal, line 145
					if(!(eq_s_b("\u00D1\u008F"))){
						return false;
					}
				}while(false);
				// delete, line 145
				slice_del();
				break;
			case 2:
				// (, line 153
				// delete, line 153
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_noun(){
		int among_var;
		// (, line 161
		// [, line 162
		ket=cursor;
		// substring, line 162
		among_var=find_among_b(a_5);
		if(among_var==0){
			return false;
		}
		// ], line 162
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 169
				// delete, line 169
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_derivational(){
		int among_var;
		// (, line 177
		// [, line 178
		ket=cursor;
		// substring, line 178
		among_var=find_among_b(a_6);
		if(among_var==0){
			return false;
		}
		// ], line 178
		bra=cursor;
		// call R2, line 178
		if(!r_R2()){
			return false;
		}
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 181
				// delete, line 181
				slice_del();
				break;
		}
		return true;
	}
	private boolean r_tidy_up(){
		int among_var;
		// (, line 185
		// [, line 186
		ket=cursor;
		// substring, line 186
		among_var=find_among_b(a_7);
		if(among_var==0){
			return false;
		}
		// ], line 186
		bra=cursor;
		switch(among_var){
			case 0:
				return false;
			case 1:
				// (, line 190
				// delete, line 190
				slice_del();
				// [, line 191
				ket=cursor;
				// literal, line 191
				if(!(eq_s_b("\u00D0\u00BD"))){
					return false;
				}
				// ], line 191
				bra=cursor;
				// literal, line 191
				if(!(eq_s_b("\u00D0\u00BD"))){
					return false;
				}
				// delete, line 191
				slice_del();
				break;
			case 2:
				// (, line 194
				// literal, line 194
				if(!(eq_s_b("\u00D0\u00BD"))){
					return false;
				}
				// delete, line 194
				slice_del();
				break;
			case 3:
				// (, line 196
				// delete, line 196
				slice_del();
				break;
		}
		return true;
	}
	public boolean stem(){
		// (, line 201
		// do, line 205
		int v_1=cursor;
		lab0:
		do{
			// repeat, line 205
			replab1:
			while(true){
				int v_2=cursor;
				lab2:
				do{
					// (, line 205
					// goto, line 205
					golab3:
					while(true){
						int v_3=cursor;
						lab4:
						do{
							// (, line 205
							// [, line 205
							bra=cursor;
							// literal, line 205
							if(!(eq_s("\u00D1\u0091"))){
								break lab4;
							}
							// ], line 205
							ket=cursor;
							cursor=v_3;
							break golab3;
						}while(false);
						cursor=v_3;
						if(cursor>=limit){
							break lab2;
						}
						cursor++;
					}
					// <-, line 205
					slice_from("\u00D0\u00B5");
					continue replab1;
				}while(false);
				cursor=v_2;
				break replab1;
			}
		}while(false);
		cursor=v_1;
		// do, line 207
		lab5:
		do{
			// call mark_regions, line 207
			if(!r_mark_regions()){
				break lab5;
			}
		}while(false);
		// backwards, line 208
		limit_backward=cursor;
		cursor=limit;
		// setlimit, line 208
		int v_5=limit-cursor;
		// tomark, line 208
		if(cursor<I_pV){
			return false;
		}
		cursor=I_pV;
		int v_6=limit_backward;
		limit_backward=cursor;
		cursor=limit-v_5;
		// (, line 208
		// do, line 209
		int v_7=limit-cursor;
		lab6:
		do{
			// (, line 209
			// or, line 210
			lab7:
			do{
				int v_8=limit-cursor;
				lab8:
				do{
					// call perfective_gerund, line 210
					if(!r_perfective_gerund()){
						break lab8;
					}
					break lab7;
				}while(false);
				cursor=limit-v_8;
				// (, line 211
				// try, line 211
				int v_9=limit-cursor;
				lab9:
				do{
					// call reflexive, line 211
					if(!r_reflexive()){
						cursor=limit-v_9;
						break lab9;
					}
				}while(false);
				// or, line 212
				lab10:
				do{
					int v_10=limit-cursor;
					lab11:
					do{
						// call adjectival, line 212
						if(!r_adjectival()){
							break lab11;
						}
						break lab10;
					}while(false);
					cursor=limit-v_10;
					lab12:
					do{
						// call verb, line 212
						if(!r_verb()){
							break lab12;
						}
						break lab10;
					}while(false);
					cursor=limit-v_10;
					// call noun, line 212
					if(!r_noun()){
						break lab6;
					}
				}while(false);
			}while(false);
		}while(false);
		cursor=limit-v_7;
		// try, line 215
		int v_11=limit-cursor;
		lab13:
		do{
			// (, line 215
			// [, line 215
			ket=cursor;
			// literal, line 215
			if(!(eq_s_b("\u00D0\u00B8"))){
				cursor=limit-v_11;
				break lab13;
			}
			// ], line 215
			bra=cursor;
			// delete, line 215
			slice_del();
		}while(false);
		// do, line 218
		int v_12=limit-cursor;
		lab14:
		do{
			// call derivational, line 218
			if(!r_derivational()){
				break lab14;
			}
		}while(false);
		cursor=limit-v_12;
		// do, line 219
		int v_13=limit-cursor;
		lab15:
		do{
			// call tidy_up, line 219
			if(!r_tidy_up()){
				break lab15;
			}
		}while(false);
		cursor=limit-v_13;
		limit_backward=v_6;
		cursor=limit_backward;
		return true;
	}
	public boolean equals(Object o){
		return o instanceof RussianStemmer;
	}
	public int hashCode(){
		return RussianStemmer.class.getName().hashCode();
	}
}
